
**Random Testing: adventurer card in randomtestcard1.c **
RANDOM TESTS
TEST FAILED: Player 2's newest card is not money.
TEST FAILED: Player 2's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
TEST FAILED: Player 0's newest card is not money.
TEST FAILED: Player 0's second newest card is not money.
500 of 1500 TESTS PASSED for adventurer
File 'dominion.c'
Lines executed:26.99% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:int compare(const void* a, const void* b) {
   438228:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
   438228:   13:  if (*(int*)a < *(int*)b)
   156510:   14:    return -1;
   281718:   15:  return 0;
   438228:   16:}
        -:   17:
        -:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        -:   39:
        -:   40:
        -:   41:
        -:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;
        -:   48:  //set up random number generator
    10600:   49:  SelectStream(1);
    10600:   50:  srand(time(0));
    10600:   51:  randomSeed = rand();
    10600:   52:  PutSeed((long)randomSeed);
        -:   53:
        -:   54:
        -:   55:  //check number of players
    21200:   56:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   57:    {
    #####:   58:      return -1;
        -:   59:    }
        -:   60:
        -:   61:  //set number of players
    10600:   62:  state->numPlayers = numPlayers;
        -:   63:
        -:   64:  //check selected kingdom cards are different
   233200:   65:  for (i = 0; i < 10; i++)
        -:   66:    {
  2332000:   67:      for (j = 0; j < 10; j++)
        -:   68:        {
  2014000:   69:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   70:	    {
    #####:   71:	      return -1;
        -:   72:	    }
  1060000:   73:        }
   106000:   74:    }
        -:   75:
        -:   76:
        -:   77:  //initialize supply
        -:   78:  ///////////////////////////////
        -:   79:
        -:   80:  //set number of Curse cards
    10600:   81:  if (numPlayers == 2)
        -:   82:    {
      499:   83:      state->supplyCount[curse] = 10;
      499:   84:    }
    10101:   85:  else if (numPlayers == 3)
        -:   86:    {
    10100:   87:      state->supplyCount[curse] = 20;
    10100:   88:    }
        -:   89:  else
        -:   90:    {
        1:   91:      state->supplyCount[curse] = 30;
        -:   92:    }
        -:   93:
        -:   94:  //set number of Victory cards
    10600:   95:  if (numPlayers == 2)
        -:   96:    {
      499:   97:      state->supplyCount[estate] = 8;
      499:   98:      state->supplyCount[duchy] = 8;
      499:   99:      state->supplyCount[province] = 8;
      499:  100:    }
        -:  101:  else
        -:  102:    {
    10101:  103:      state->supplyCount[estate] = 12;
    10101:  104:      state->supplyCount[duchy] = 12;
    10101:  105:      state->supplyCount[province] = 12;
        -:  106:    }
        -:  107:
        -:  108:  //set number of Treasure cards
    10600:  109:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10600:  110:  state->supplyCount[silver] = 40;
    10600:  111:  state->supplyCount[gold] = 30;
        -:  112:
        -:  113:  //set number of Kingdom cards
   445200:  114:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  115:    {
  3498000:  116:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  117:	{
  1643000:  118:	  if (kingdomCards[j] == i)
        -:  119:	    {
        -:  120:	      //check if card is a 'Victory' Kingdom card
   201400:  121:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  122:		{
    10600:  123:		  if (numPlayers == 2){
      499:  124:		    state->supplyCount[i] = 8;
      499:  125:		  }
    10101:  126:		  else{ state->supplyCount[i] = 12; }
    10600:  127:		}
        -:  128:	      else
        -:  129:		{
    95400:  130:		  state->supplyCount[i] = 10;
        -:  131:		}
   106000:  132:	      break;
        -:  133:	    }
        -:  134:	  else    //card is not in the set choosen for the game
        -:  135:	    {
  1537000:  136:	      state->supplyCount[i] = -1;
        -:  137:	    }
  1537000:  138:	}
        -:  139:
   212000:  140:    }
        -:  141:
        -:  142:  ////////////////////////
        -:  143:  //supply intilization complete
        -:  144:
        -:  145:  //set player decks
    83804:  146:  for (i = 0; i < numPlayers; i++)
        -:  147:    {
    31302:  148:      state->deckCount[i] = 0;
   250416:  149:      for (j = 0; j < 3; j++)
        -:  150:	{
    93906:  151:	  state->deck[i][j] = estate;
    93906:  152:	  state->deckCount[i]++;
    93906:  153:	}
   500832:  154:      for (j = 3; j < 10; j++)
        -:  155:	{
   219114:  156:	  state->deck[i][j] = copper;
   219114:  157:	  state->deckCount[i]++;
   219114:  158:	}
    31302:  159:    }
        -:  160:
        -:  161:  //shuffle player decks
    83804:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {
    31302:  164:      if ( shuffle(i, state) < 0 )
        -:  165:	{
    #####:  166:	  return -1;
        -:  167:	}
    31302:  168:    }
        -:  169:
        -:  170:  //draw player hands
    83804:  171:  for (i = 0; i < numPlayers; i++)
        -:  172:    {
        -:  173:      //initialize hand size to zero
    31302:  174:      state->handCount[i] = 0;
    31302:  175:      state->discardCount[i] = 0;
        -:  176:      //draw 5 cards
        -:  177:      // for (j = 0; j < 5; j++)
        -:  178:      //	{
        -:  179:      //	  drawCard(i, state);
        -:  180:      //	}
    31302:  181:    }
        -:  182:
        -:  183:  //set embargo tokens to 0 for all supply piles
   593600:  184:  for (i = 0; i <= treasure_map; i++)
        -:  185:    {
   286200:  186:      state->embargoTokens[i] = 0;
   286200:  187:    }
        -:  188:
        -:  189:  //initialize first player's turn
    10600:  190:  state->outpostPlayed = 0;
    10600:  191:  state->phase = 0;
    10600:  192:  state->numActions = 1;
    10600:  193:  state->numBuys = 1;
    10600:  194:  state->playedCardCount = 0;
    10600:  195:  state->whoseTurn = 0;
    10600:  196:  state->handCount[state->whoseTurn] = 0;
        -:  197:  //int it; move to top
        -:  198:
        -:  199:  //Moved draw cards to here, only drawing at the start of a turn
   127200:  200:  for (it = 0; it < 5; it++){
    53000:  201:    drawCard(state->whoseTurn, state);
    53000:  202:  }
        -:  203:
    10600:  204:  updateCoins(state->whoseTurn, state, 0);
        -:  205:
    10600:  206:  return 0;
    10600:  207:}
        -:  208:
        -:  209:int shuffle(int player, struct gameState *state) {
        -:  210:
        -:  211:
        -:  212:  int newDeck[MAX_DECK];
    31402:  213:  int newDeckPos = 0;
        -:  214:  int card;
        -:  215:  int i;
        -:  216:
    31402:  217:  if (state->deckCount[player] < 1)
      100:  218:    return -1;
    31302:  219:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  220:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  221:
   688644:  222:  while (state->deckCount[player] > 0) {
   313020:  223:    card = floor(Random() * state->deckCount[player]);
   313020:  224:    newDeck[newDeckPos] = state->deck[player][card];
   313020:  225:    newDeckPos++;
  2170924:  226:    for (i = card; i < state->deckCount[player]-1; i++) {
   772442:  227:      state->deck[player][i] = state->deck[player][i+1];
   772442:  228:    }
   313020:  229:    state->deckCount[player]--;
        -:  230:  }
   688644:  231:  for (i = 0; i < newDeckPos; i++) {
   313020:  232:    state->deck[player][i] = newDeck[i];
   313020:  233:    state->deckCount[player]++;
   313020:  234:  }
        -:  235:
    31302:  236:  return 0;
    31402:  237:}
        -:  238:
        -:  239:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  240:{
        -:  241:  int card;
    #####:  242:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  243:
        -:  244:  //check if it is the right phase
    #####:  245:  if (state->phase != 0)
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:
        -:  250:  //check if player has enough actions
    #####:  251:  if ( state->numActions < 1 )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //get card played
    #####:  257:  card = handCard(handPos, state);
        -:  258:
        -:  259:  //check if selected card is an action
    #####:  260:  if ( card < adventurer || card > treasure_map )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:
        -:  265:  //play card
    #####:  266:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:
        -:  271:  //reduce number of actions
    #####:  272:  state->numActions--;
        -:  273:
        -:  274:  //update coins (Treasure cards may be added with card draws)
    #####:  275:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  276:
    #####:  277:  return 0;
    #####:  278:}
        -:  279:
        -:  280:int buyCard(int supplyPos, struct gameState *state) {
        -:  281:  int who;
        -:  282:  if (DEBUG){
        -:  283:    printf("Entering buyCard...\n");
        -:  284:  }
        -:  285:
        -:  286:  // I don't know what to do about the phase thing.
        -:  287:
    #####:  288:  who = state->whoseTurn;
        -:  289:
    #####:  290:  if (state->numBuys < 1){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have any buys left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (supplyCount(supplyPos, state) <1){
        -:  295:    if (DEBUG)
        -:  296:      printf("There are not any of that type of card left\n");
    #####:  297:    return -1;
    #####:  298:  } else if (state->coins < getCost(supplyPos)){
        -:  299:    if (DEBUG)
        -:  300:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  301:    return -1;
        -:  302:  } else {
    #####:  303:    state->phase=1;
        -:  304:    //state->supplyCount[supplyPos]--;
    #####:  305:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  306:
    #####:  307:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  308:    state->numBuys--;
        -:  309:    if (DEBUG)
        -:  310:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  311:  }
        -:  312:
        -:  313:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  314:  //state->discardCount[who]++;
        -:  315:
    #####:  316:  return 0;
    #####:  317:}
        -:  318:
        -:  319:int numHandCards(struct gameState *state) {
    #####:  320:  return state->handCount[ whoseTurn(state) ];
        -:  321:}
        -:  322:
        -:  323:int handCard(int handPos, struct gameState *state) {
    #####:  324:  int currentPlayer = whoseTurn(state);
    #####:  325:  return state->hand[currentPlayer][handPos];
        -:  326:}
        -:  327:
        -:  328:int supplyCount(int card, struct gameState *state) {
    #####:  329:  return state->supplyCount[card];
        -:  330:}
        -:  331:
        -:  332:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  333:  int i;
    #####:  334:  int count = 0;
        -:  335:
    #####:  336:  for (i = 0; i < state->deckCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->deck[player][i] == card) count++;
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->handCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->hand[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->discardCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->discard[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  return count;
        -:  352:}
        -:  353:
        -:  354:int whoseTurn(struct gameState *state) {
    10600:  355:  return state->whoseTurn;
        -:  356:}
        -:  357:
        -:  358:int endTurn(struct gameState *state) {
        -:  359:  int k;
        -:  360:  int i;
    #####:  361:  int currentPlayer = whoseTurn(state);
        -:  362:
        -:  363:  //Discard hand
    #####:  364:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  367:  }
    #####:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:
        -:  370:  //Code for determining the player
    #####:  371:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  373:  }
        -:  374:  else{
    #####:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
    #####:  378:  state->outpostPlayed = 0;
    #####:  379:  state->phase = 0;
    #####:  380:  state->numActions = 1;
    #####:  381:  state->coins = 0;
    #####:  382:  state->numBuys = 1;
    #####:  383:  state->playedCardCount = 0;
    #####:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
    #####:  388:  for (k = 0; k < 5; k++){
    #####:  389:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  390:  }
        -:  391:
        -:  392:  //Update money
    #####:  393:  updateCoins(state->whoseTurn, state , 0);
        -:  394:
    #####:  395:  return 0;
        -:  396:}
        -:  397:
        -:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:
        -:  402:  //if stack of Province cards is empty, the game ends
    #####:  403:  if (state->supplyCount[province] == 0)
        -:  404:    {
    #####:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
    #####:  409:  j = 0;
    #####:  410:  for (i = 0; i < 25; i++)
        -:  411:    {
    #####:  412:      if (state->supplyCount[i] == 0)
        -:  413:	{
    #####:  414:	  j++;
    #####:  415:	}
    #####:  416:    }
    #####:  417:  if ( j >= 3)
        -:  418:    {
    #####:  419:      return 1;
        -:  420:    }
        -:  421:
    #####:  422:  return 0;
    #####:  423:}
        -:  424:
        -:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
    #####:  428:  int score = 0;
        -:  429:  //score from hand
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  438:    }
        -:  439:
        -:  440:  //score from discard
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  446:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  449:    }
        -:  450:
        -:  451:  //score from deck
    #####:  452:  for (i = 0; i < state->discardCount[player]; i++)
        -:  453:    {
    #####:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  457:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  460:    }
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
        -:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
    #####:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
    #####:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
    #####:  492:	}
    #####:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
    #####:  503:	}
    #####:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
    #####:  513:	}
    #####:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
    #####:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
    #####:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
        -:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
    64600:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
      200:  541:    for (i = 0; i < state->discardCount[player];i++){
    #####:  542:      state->deck[player][i] = state->discard[player][i];
    #####:  543:      state->discard[player][i] = -1;
    #####:  544:    }
        -:  545:
      100:  546:    state->deckCount[player] = state->discardCount[player];
      100:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
      100:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:
      100:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
      100:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:
      100:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
      100:  567:    if (deckCounter == 0)
      100:  568:      return -1;
        -:  569:
    #####:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  571:    state->deckCount[player]--;
    #####:  572:    state->handCount[player]++;//Increment hand count
    #####:  573:  }
        -:  574:
        -:  575:  else{
    64500:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
    64500:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
    64500:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    64500:  584:    state->deckCount[player]--;
    64500:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
    64500:  588:  return 0;
    64600:  589:}
        -:  590:
        -:  591:int getCost(int cardNumber)
        -:  592:{
    #####:  593:  switch( cardNumber )
        -:  594:    {
        -:  595:    case curse:
    #####:  596:      return 0;
        -:  597:    case estate:
    #####:  598:      return 2;
        -:  599:    case duchy:
    #####:  600:      return 5;
        -:  601:    case province:
    #####:  602:      return 8;
        -:  603:    case copper:
    #####:  604:      return 0;
        -:  605:    case silver:
    #####:  606:      return 3;
        -:  607:    case gold:
    #####:  608:      return 6;
        -:  609:    case adventurer:
    #####:  610:      return 6;
        -:  611:    case council_room:
    #####:  612:      return 5;
        -:  613:    case feast:
    #####:  614:      return 4;
        -:  615:    case gardens:
    #####:  616:      return 4;
        -:  617:    case mine:
    #####:  618:      return 5;
        -:  619:    case remodel:
    #####:  620:      return 4;
        -:  621:    case smithy:
    #####:  622:      return 4;
        -:  623:    case village:
    #####:  624:      return 3;
        -:  625:    case baron:
    #####:  626:      return 4;
        -:  627:    case great_hall:
    #####:  628:      return 3;
        -:  629:    case minion:
    #####:  630:      return 5;
        -:  631:    case steward:
    #####:  632:      return 3;
        -:  633:    case tribute:
    #####:  634:      return 5;
        -:  635:    case ambassador:
    #####:  636:      return 3;
        -:  637:    case cutpurse:
    #####:  638:      return 4;
        -:  639:    case embargo:
    #####:  640:      return 2;
        -:  641:    case outpost:
    #####:  642:      return 5;
        -:  643:    case salvager:
    #####:  644:      return 4;
        -:  645:    case sea_hag:
    #####:  646:      return 4;
        -:  647:    case treasure_map:
    #####:  648:      return 4;
        -:  649:    }
        -:  650:
    #####:  651:  return -1;
    #####:  652:}
        -:  653:
        -:  654:int ambassadorFunc(int currentPlayer, int choice1, int choice2, struct gameState *state, int handPos){
        -:  655:  int i, j;
    #####:  656:  j = 0;		//used to check if player has enough cards to discard
        -:  657:
    #####:  658:  if (choice2 > 2 || choice2 < 0)
        -:  659:  {
    #####:  660:    return -1;
        -:  661:  }
        -:  662:  //make choice1 >= handPos instead of choice1 == handPos
    #####:  663:  if (choice1 >= handPos)
        -:  664:  {
    #####:  665:    return -1;
        -:  666:  }
        -:  667:
    #####:  668:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  669:  {
    #####:  670:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  671:    {
    #####:  672:      j++;
    #####:  673:    }
    #####:  674:  }
        -:  675:  // made j <=choice2 instead of j < choice;
    #####:  676:  if (j <= choice2)
        -:  677:  {
    #####:  678:    return -1;
        -:  679:  }
        -:  680:
        -:  681:  if (DEBUG)
        -:  682:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  683:
        -:  684:  //increase supply count for choosen card by amount being discarded
    #####:  685:  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  686:
        -:  687:  //each other player gains a copy of revealed card
    #####:  688:  for (i = 0; i < state->numPlayers; i++)
        -:  689:  {
    #####:  690:    if (i != currentPlayer)
        -:  691:    {
    #####:  692:      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  693:    }
    #####:  694:  }
        -:  695:
        -:  696:  //discard played card from hand
    #####:  697:  discardCard(handPos, currentPlayer, state, 0);
        -:  698:
        -:  699:  //trash copies of cards returned to supply
    #####:  700:  for (j = 0; j < choice2; j++)
        -:  701:  {
    #####:  702:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  703:    {
    #####:  704:      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  705:      {
    #####:  706:        discardCard(i, currentPlayer, state, 1);
    #####:  707:        break;
        -:  708:      }
    #####:  709:    }
    #####:  710:  }
    #####:  711:  return 0;
    #####:  712:}
        -:  713:
        -:  714:int councilFunc(int currentPlayer, struct gameState *state){
        -:  715:  //+4 Cards
        -:  716:  int i;
     1000:  717:  for (i = 0; i < 4; i++)
        -:  718:  {
      400:  719:    drawCard(currentPlayer, state);
      400:  720:  }
        -:  721:
        -:  722:  //+1 Buy
        -:  723:  //made this increment by 2 instead of 1.
      100:  724:  state->numBuys++;
      100:  725:  state->numBuys++;
        -:  726:
        -:  727:  //Each other player draws a card drawCard(1, state)
      800:  728:  for (i = 0; i < state->numPlayers; i++)
        -:  729:  {
      300:  730:    if ( i != currentPlayer )
        -:  731:    {
      200:  732:      drawCard(0, state);
      200:  733:    }
      300:  734:  }
      100:  735:  return 0;
        -:  736:}
        -:  737:
        -:  738:int smithyFunc(int currentPlayer, struct gameState *state, int handPos){
        -:  739:  //+4 Cards instead of 3
        -:  740:  int i;
    #####:  741:  for (i = 0; i < 4; i++)
        -:  742:  {
    #####:  743:    drawCard(currentPlayer, state);
    #####:  744:  }
        -:  745:
        -:  746:  //discard card from hand
    #####:  747:  discardCard(handPos, currentPlayer, state, 0);
    #####:  748:  return 0;
        -:  749:}
        -:  750:
        -:  751:int greatHallFunc(int currentPlayer, struct gameState *state, int handPos) {
        -:  752:  //+1 Card
    10000:  753:  drawCard(currentPlayer, state);
        -:  754:
        -:  755:  //+1 Actions
    10000:  756:  state->numActions++;
        -:  757:
        -:  758:  //discard card from hand
    10000:  759:  discardCard(handPos, currentPlayer, state, 0);
    10000:  760:  return 0;
        -:  761:}
        -:  762:
        -:  763:int adventurerFunc(int currentPlayer, struct gameState *state, int handPos){
      500:  764:  int z = 0;
      500:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
        -:  767:  int temphand[MAX_HAND];// moved above the if statement
        -:  768:
     3000:  769:  while(drawntreasure<2)
        -:  770:  {
     1000:  771:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  772:      shuffle(currentPlayer, state);
    #####:  773:    }
     1000:  774:    drawCard(currentPlayer, state);
     1000:  775:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1000:  776:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold)
     1000:  777:      drawntreasure++;
        -:  778:    else{
    #####:  779:      temphand[z]=cardDrawn;
    #####:  780:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  781:      z++;
        -:  782:    }
        -:  783:  }
     1000:  784:  while(z-1>=0){
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  786:    z=z-1;
        -:  787:  }
      500:  788:  return 0;
        -:  789:}
        -:  790:
        -:  791:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  792:{
        -:  793:  int i;
        -:  794:  int j;
        -:  795:  int k;
        -:  796:  int x;
        -:  797:  int index;
    10600:  798:  int currentPlayer = whoseTurn(state);
    10600:  799:  int nextPlayer = currentPlayer + 1;
        -:  800:
    10600:  801:  int tributeRevealedCards[2] = {-1, -1};
        -:  802:  int temphand[MAX_HAND];// moved above the if statement
        -:  803:  //int drawntreasure=0;
        -:  804:  //int cardDrawn;
        -:  805:  //int z = 0;// this is the counter for the temp hand
    10600:  806:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  807:    nextPlayer = 0;
    #####:  808:  }
        -:  809:
        -:  810:
        -:  811:  //uses switch to select card and perform actions
    10600:  812:  switch( card )
        -:  813:    {
        -:  814:    case adventurer:
      500:  815:      adventurerFunc(currentPlayer, state, handPos);
      500:  816:      return 0;
        -:  817:
        -:  818:    case council_room:
      100:  819:      councilFunc(currentPlayer, state);
      100:  820:      return 0;
        -:  821:
        -:  822:    case feast:
        -:  823:      //gain card with cost up to 5
        -:  824:      //Backup hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  826:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  827:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  828:      }
        -:  829:      //Backup hand
        -:  830:
        -:  831:      //Update Coins for Buy
    #####:  832:      updateCoins(currentPlayer, state, 5);
    #####:  833:      x = 1;//Condition to loop on
    #####:  834:      while( x == 1) {//Buy one card
    #####:  835:	if (supplyCount(choice1, state) <= 0){
        -:  836:	  if (DEBUG)
        -:  837:	    printf("None of that card left, sorry!\n");
        -:  838:
        -:  839:	  if (DEBUG){
        -:  840:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  841:	  }
    #####:  842:	}
    #####:  843:	else if (state->coins < getCost(choice1)){
    #####:  844:	  printf("That card is too expensive!\n");
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  848:	  }
    #####:  849:	}
        -:  850:	else{
        -:  851:
        -:  852:	  if (DEBUG){
        -:  853:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  854:	  }
        -:  855:
    #####:  856:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  857:	  x = 0;//No more buying cards
        -:  858:
        -:  859:	  if (DEBUG){
        -:  860:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  861:	  }
        -:  862:
        -:  863:	}
        -:  864:      }
        -:  865:
        -:  866:      //Reset Hand
    #####:  867:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  868:	state->hand[currentPlayer][i] = temphand[i];
    #####:  869:	temphand[i] = -1;
    #####:  870:      }
        -:  871:      //Reset Hand
        -:  872:
    #####:  873:      return 0;
        -:  874:
        -:  875:    case gardens:
    #####:  876:      return -1;
        -:  877:
        -:  878:    case mine:
    #####:  879:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  880:
    #####:  881:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      if (choice2 > treasure_map || choice2 < curse)
        -:  887:	{
    #####:  888:	  return -1;
        -:  889:	}
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 2, currentPlayer);
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);
    #####:  907:	      break;
        -:  908:	    }
    #####:  909:	}
        -:  910:
    #####:  911:      return 0;
        -:  912:
        -:  913:    case remodel:
    #####:  914:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  915:
    #####:  916:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  917:	{
    #####:  918:	  return -1;
        -:  919:	}
        -:  920:
    #####:  921:      gainCard(choice2, state, 0, currentPlayer);
        -:  922:
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
        -:  925:
        -:  926:      //discard trashed card
    #####:  927:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  928:	{
    #####:  929:	  if (state->hand[currentPlayer][i] == j)
        -:  930:	    {
    #####:  931:	      discardCard(i, currentPlayer, state, 0);
    #####:  932:	      break;
        -:  933:	    }
    #####:  934:	}
    #####:  935:      return 0;
        -:  936:    //refract smithy
        -:  937:    case smithy:
    #####:  938:      smithyFunc(currentPlayer, state, handPos);
    #####:  939:      return 0;
        -:  940:
        -:  941:    case village:
        -:  942:      //+1 Card
    #####:  943:      drawCard(currentPlayer, state);
        -:  944:
        -:  945:      //+2 Actions
    #####:  946:      state->numActions = state->numActions + 2;
        -:  947:
        -:  948:      //discard played card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
    #####:  950:      return 0;
        -:  951:
        -:  952:    case baron:
    #####:  953:      state->numBuys++;//Increase buys by 1!
    #####:  954:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  955:	int p = 0;//Iterator for hand!
    #####:  956:	int card_not_discarded = 1;//Flag for discard set!
    #####:  957:	while(card_not_discarded){
    #####:  958:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  959:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  960:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  961:	    state->discardCount[currentPlayer]++;
    #####:  962:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  963:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  964:	    }
    #####:  965:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  966:	    state->handCount[currentPlayer]--;
    #####:  967:	    card_not_discarded = 0;//Exit the loop
    #####:  968:	  }
    #####:  969:	  else if (p > state->handCount[currentPlayer]){
        -:  970:	    if(DEBUG) {
        -:  971:	      printf("No estate cards in your hand, invalid choice\n");
        -:  972:	      printf("Must gain an estate if there are any\n");
        -:  973:	    }
    #####:  974:	    if (supplyCount(estate, state) > 0){
    #####:  975:	      gainCard(estate, state, 0, currentPlayer);
    #####:  976:	      state->supplyCount[estate]--;//Decrement estates
    #####:  977:	      if (supplyCount(estate, state) == 0){
    #####:  978:		isGameOver(state);
    #####:  979:	      }
    #####:  980:	    }
    #####:  981:	    card_not_discarded = 0;//Exit the loop
    #####:  982:	  }
        -:  983:
        -:  984:	  else{
    #####:  985:	    p++;//Next card
        -:  986:	  }
        -:  987:	}
    #####:  988:      }
        -:  989:
        -:  990:      else{
    #####:  991:	if (supplyCount(estate, state) > 0){
    #####:  992:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  993:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  994:	  if (supplyCount(estate, state) == 0){
    #####:  995:	    isGameOver(state);
    #####:  996:	  }
    #####:  997:	}
        -:  998:      }
        -:  999:
        -: 1000:
    #####: 1001:      return 0;
        -: 1002:
        -: 1003:    case great_hall:
    10000: 1004:      greatHallFunc(currentPlayer, state, handPos);
        -: 1005:      /*//+1 Card
        -: 1006:      drawCard(currentPlayer, state);
        -: 1007:
        -: 1008:      //+1 Actions
        -: 1009:      state->numActions++;
        -: 1010:
        -: 1011:      //discard card from hand
        -: 1012:      discardCard(handPos, currentPlayer, state, 0); */
    10000: 1013:      return 0;
        -: 1014:
        -: 1015:    case minion:
        -: 1016:      //+1 action
    #####: 1017:      state->numActions++;
        -: 1018:
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
        -: 1021:
    #####: 1022:      if (choice1)		//+2 coins
        -: 1023:	{
    #####: 1024:	  state->coins = state->coins + 2;
    #####: 1025:	}
        -: 1026:
    #####: 1027:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1028:	{
        -: 1029:	  //discard hand
    #####: 1030:	  while(numHandCards(state) > 0)
        -: 1031:	    {
    #####: 1032:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1033:	    }
        -: 1034:
        -: 1035:	  //draw 4
    #####: 1036:	  for (i = 0; i < 4; i++)
        -: 1037:	    {
    #####: 1038:	      drawCard(currentPlayer, state);
    #####: 1039:	    }
        -: 1040:
        -: 1041:	  //other players discard hand and redraw if hand size > 4
    #####: 1042:	  for (i = 0; i < state->numPlayers; i++)
        -: 1043:	    {
    #####: 1044:	      if (i != currentPlayer)
        -: 1045:		{
    #####: 1046:		  if ( state->handCount[i] > 4 )
        -: 1047:		    {
        -: 1048:		      //discard hand
    #####: 1049:		      while( state->handCount[i] > 0 )
        -: 1050:			{
    #####: 1051:			  discardCard(handPos, i, state, 0);
        -: 1052:			}
        -: 1053:
        -: 1054:		      //draw 4
    #####: 1055:		      for (j = 0; j < 4; j++)
        -: 1056:			{
    #####: 1057:			  drawCard(i, state);
    #####: 1058:			}
    #####: 1059:		    }
    #####: 1060:		}
    #####: 1061:	    }
        -: 1062:
    #####: 1063:	}
    #####: 1064:      return 0;
        -: 1065:
        -: 1066:    case steward:
    #####: 1067:      if (choice1 == 1)
        -: 1068:	{
        -: 1069:	  //+2 cards
    #####: 1070:	  drawCard(currentPlayer, state);
    #####: 1071:	  drawCard(currentPlayer, state);
    #####: 1072:	}
    #####: 1073:      else if (choice1 == 2)
        -: 1074:	{
        -: 1075:	  //+2 coins
    #####: 1076:	  state->coins = state->coins + 2;
    #####: 1077:	}
        -: 1078:      else
        -: 1079:	{
        -: 1080:	  //trash 2 cards in hand
    #####: 1081:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1082:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1083:	}
        -: 1084:
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1087:      return 0;
        -: 1088:
        -: 1089:    case tribute:
    #####: 1090:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1091:	if (state->deckCount[nextPlayer] > 0){
    #####: 1092:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	  state->deckCount[nextPlayer]--;
    #####: 1094:	}
    #####: 1095:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1096:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1097:	  state->discardCount[nextPlayer]--;
    #####: 1098:	}
        -: 1099:	else{
        -: 1100:	  //No Card to Reveal
        -: 1101:	  if (DEBUG){
        -: 1102:	    printf("No cards to reveal\n");
        -: 1103:	  }
        -: 1104:	}
    #####: 1105:      }
        -: 1106:
        -: 1107:      else{
    #####: 1108:	if (state->deckCount[nextPlayer] == 0){
    #####: 1109:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1110:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1111:	    state->deckCount[nextPlayer]++;
    #####: 1112:	    state->discard[nextPlayer][i] = -1;
    #####: 1113:	    state->discardCount[nextPlayer]--;
    #####: 1114:	  }
        -: 1115:
    #####: 1116:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1117:	}
    #####: 1118:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:	state->deckCount[nextPlayer]--;
    #####: 1121:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1122:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1123:	state->deckCount[nextPlayer]--;
        -: 1124:      }
        -: 1125:
    #####: 1126:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1127:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1128:	state->playedCardCount++;
    #####: 1129:	tributeRevealedCards[1] = -1;
    #####: 1130:      }
        -: 1131:
    #####: 1132:      for (i = 0; i <= 2; i ++){
    #####: 1133:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1134:	  state->coins += 2;
    #####: 1135:	}
        -: 1136:
    #####: 1137:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1138:	  drawCard(currentPlayer, state);
    #####: 1139:	  drawCard(currentPlayer, state);
    #####: 1140:	}
        -: 1141:	else{//Action Card
    #####: 1142:	  state->numActions = state->numActions + 2;
        -: 1143:	}
    #####: 1144:      }
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:
        -: 1148:    case ambassador:
    #####: 1149:      ambassadorFunc(currentPlayer,choice1, choice2, state,handPos);
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:    case cutpurse:
        -: 1153:
    #####: 1154:      updateCoins(currentPlayer, state, 2);
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
        -: 1158:	    {
    #####: 1159:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1160:		{
    #####: 1161:		  if (state->hand[i][j] == copper)
        -: 1162:		    {
    #####: 1163:		      discardCard(j, i, state, 0);
    #####: 1164:		      break;
        -: 1165:		    }
    #####: 1166:		  if (j == state->handCount[i])
        -: 1167:		    {
    #####: 1168:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1169:			{
        -: 1170:			  if (DEBUG)
        -: 1171:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1172:			}
    #####: 1173:		      break;
        -: 1174:		    }
    #####: 1175:		}
        -: 1176:
    #####: 1177:	    }
        -: 1178:
    #####: 1179:	}
        -: 1180:
        -: 1181:      //discard played card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
        -: 1183:
    #####: 1184:      return 0;
        -: 1185:
        -: 1186:
        -: 1187:    case embargo:
        -: 1188:      //+2 Coins
    #####: 1189:      state->coins = state->coins + 2;
        -: 1190:
        -: 1191:      //see if selected pile is in play
    #####: 1192:      if ( state->supplyCount[choice1] == -1 )
        -: 1193:	{
    #####: 1194:	  return -1;
        -: 1195:	}
        -: 1196:
        -: 1197:      //add embargo token to selected supply pile
    #####: 1198:      state->embargoTokens[choice1]++;
        -: 1199:
        -: 1200:      //trash card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case outpost:
        -: 1205:      //set outpost flag
    #####: 1206:      state->outpostPlayed++;
        -: 1207:
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1210:      return 0;
        -: 1211:
        -: 1212:    case salvager:
        -: 1213:      //+1 buy
    #####: 1214:      state->numBuys++;
        -: 1215:
    #####: 1216:      if (choice1)
        -: 1217:	{
        -: 1218:	  //gain coins equal to trashed card
    #####: 1219:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1220:	  //trash card
    #####: 1221:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1222:	}
        -: 1223:
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1226:      return 0;
        -: 1227:
        -: 1228:    case sea_hag:
    #####: 1229:      for (i = 0; i < state->numPlayers; i++){
    #####: 1230:	if (i != currentPlayer){
    #####: 1231:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1232:	  state->discardCount[i]++;
    #####: 1233:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1234:	}
    #####: 1235:      }
    #####: 1236:      return 0;
        -: 1237:
        -: 1238:    case treasure_map:
        -: 1239:      //search hand for another treasure_map
    #####: 1240:      index = -1;
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1242:	{
    #####: 1243:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1244:	    {
    #####: 1245:	      index = i;
    #####: 1246:	      break;
        -: 1247:	    }
    #####: 1248:	}
    #####: 1249:      if (index > -1)
        -: 1250:	{
        -: 1251:	  //trash both treasure cards
    #####: 1252:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1253:	  discardCard(index, currentPlayer, state, 1);
        -: 1254:
        -: 1255:	  //gain 4 Gold cards
    #####: 1256:	  for (i = 0; i < 4; i++)
        -: 1257:	    {
    #####: 1258:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1259:	    }
        -: 1260:
        -: 1261:	  //return success
    #####: 1262:	  return 1;
        -: 1263:	}
        -: 1264:
        -: 1265:      //no second treasure_map found in hand
    #####: 1266:      return -1;
        -: 1267:    }
        -: 1268:
    #####: 1269:  return -1;
    10600: 1270:}
        -: 1271:
        -: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1273:{
        -: 1274:
        -: 1275:  //if card is not trashed, added to Played pile
    10000: 1276:  if (trashFlag < 1)
        -: 1277:    {
        -: 1278:      //add card to played pile
    10000: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    10000: 1280:      state->playedCardCount++;
    10000: 1281:    }
        -: 1282:
        -: 1283:  //set played card to -1
    10000: 1284:  state->hand[currentPlayer][handPos] = -1;
        -: 1285:
        -: 1286:  //remove card from player's hand
    10000: 1287:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
    #####: 1291:    }
    10000: 1292:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
    #####: 1296:    }
        -: 1297:  else
        -: 1298:    {
        -: 1299:      //replace discarded card with last card in hand
    10000: 1300:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1301:      //set last card to -1
    10000: 1302:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1303:      //reduce number of cards in hand
    10000: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:
    10000: 1307:  return 0;
        -: 1308:}
        -: 1309:
        -: 1310:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1311:{
        -: 1312:  //Note: supplyPos is enum of choosen card
        -: 1313:
        -: 1314:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1315:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1316:    {
    #####: 1317:      return -1;
        -: 1318:    }
        -: 1319:
        -: 1320:  //added card for [whoseTurn] current player:
        -: 1321:  // toFlag = 0 : add to discard
        -: 1322:  // toFlag = 1 : add to deck
        -: 1323:  // toFlag = 2 : add to hand
        -: 1324:
    #####: 1325:  if (toFlag == 1)
        -: 1326:    {
    #####: 1327:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1328:      state->deckCount[player]++;
    #####: 1329:    }
    #####: 1330:  else if (toFlag == 2)
        -: 1331:    {
    #####: 1332:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1333:      state->handCount[player]++;
    #####: 1334:    }
        -: 1335:  else
        -: 1336:    {
    #####: 1337:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1338:      state->discardCount[player]++;
        -: 1339:    }
        -: 1340:
        -: 1341:  //decrease number in supply pile
    #####: 1342:  state->supplyCount[supplyPos]--;
        -: 1343:
    #####: 1344:  return 0;
    #####: 1345:}
        -: 1346:
        -: 1347:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1348:{
        -: 1349:  int i;
        -: 1350:
        -: 1351:  //reset coin count
    10600: 1352:  state->coins = 0;
        -: 1353:
        -: 1354:  //add coins for each Treasure card in player's hand
   127200: 1355:  for (i = 0; i < state->handCount[player]; i++)
        -: 1356:    {
    53000: 1357:      if (state->hand[player][i] == copper)
        -: 1358:	{
    21200: 1359:	  state->coins += 1;
    21200: 1360:	}
    31800: 1361:      else if (state->hand[player][i] == silver)
        -: 1362:	{
    #####: 1363:	  state->coins += 2;
    #####: 1364:	}
    31800: 1365:      else if (state->hand[player][i] == gold)
        -: 1366:	{
    #####: 1367:	  state->coins += 3;
    #####: 1368:	}
    53000: 1369:    }
        -: 1370:
        -: 1371:  //add bonus
    10600: 1372:  state->coins += bonus;
        -: 1373:
    10600: 1374:  return 0;
        -: 1375:}
        -: 1376:
        -: 1377:
        -: 1378://end of dominion.c
