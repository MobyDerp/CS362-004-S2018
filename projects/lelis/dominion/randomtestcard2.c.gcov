        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <time.h>
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:/*
        -:   10: * randomtestcard2.c -- randomly tests council_room
        -:   11: */
        -:   12:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   13:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   14:int councilFunc(int currentPlayer, struct gameState *state);
        -:   15:
function main called 1 returned 100% blocks executed 100%
        -:   16:int main (int argc, char** argv) {
        1:   17:    printf("\n**Random Testing: council_room in randomtestcard2.c **\n");
        -:   18:
        1:   19:    srand(time(NULL));
        -:   20:
        1:   21:    printf("RANDOM TESTS\n");
        -:   22:
        1:   23:    int numtests = 100;
        1:   24:    int NUMQUESTIONS = 0;
        1:   25:    int bad = 0;
      202:   26:    for(int i = 0; i < numtests; i++)
branch  0 taken 99%
branch  1 taken 1%
        -:   27:    {
      100:   28:        int numPlayers = rand() % (MAX_PLAYERS - 1) + 2; // Value between 2 and 4.
      100:   29:        NUMQUESTIONS += numPlayers;
        -:   30:        struct gameState G;
      100:   31:        int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   32:
      100:   33:        initializeGame(numPlayers, k, rand(), &G);
        -:   34:
      100:   35:        int player = rand() % numPlayers;
      100:   36:        G.whoseTurn = player;
        -:   37:
      100:   38:        int handPos = rand() % MAX_HAND;
        -:   39:
        -:   40:        struct gameState orig;
      100:   41:        memcpy(&orig, &G, sizeof(struct gameState));
        -:   42:
      100:   43:        cardEffect(council_room, 0,0,0, &G, handPos, 0);
        -:   44:
      800:   45:        for(int i = 0; i < numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25%
      300:   46:            if(i == player){
branch  0 taken 33%
branch  1 taken 67%
      100:   47:                if(G.handCount[i] != orig.handCount[i] + 3){
branch  0 taken 100%
branch  1 taken 0%
      100:   48:                    printf("TEST FAILED: Player %d did not get 3 more cards.\n", i);
      100:   49:                    bad++;
      100:   50:                }
      100:   51:            }else{
      200:   52:                if(G.handCount[i] != orig.handCount[i] + 1){
branch  0 taken 100%
branch  1 taken 0%
      200:   53:                    printf("TEST FAILED: Player %d did not draw 1 card.\n", i);
      200:   54:                    bad++;
      200:   55:                }
        -:   56:            }
        -:   57:
      300:   58:            if(i ==player){
branch  0 taken 33%
branch  1 taken 67%
      100:   59:              if(G.numBuys != orig.numBuys + 1)
branch  0 taken 100%
branch  1 taken 0%
        -:   60:              {
      100:   61:                  printf("TEST FAILED: numBuys supposed to increase by 1.\n");
      100:   62:                  bad++;
      100:   63:              }
      100:   64:            }
      300:   65:        }
      100:   66:    }
        1:   67:    printf("%d of %d TESTS PASSED For council_room\n", NUMQUESTIONS - bad, NUMQUESTIONS);
        1:   68:}
