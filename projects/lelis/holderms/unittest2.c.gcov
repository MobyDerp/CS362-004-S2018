        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
function assertTrue called 6 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
        6:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
        6:   14:        printf("Test: PASSED\n");
        6:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        6:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 92%
        -:   22:int main () {
        -:   23:    int i, b;
        1:   24:    int numbPlayers = 2;
        1:   25:    int player = 0;
        -:   26:
        -:   27:    // kingdom cards
        1:   28:    int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        1:   29:    int seed = 1000;
        -:   30:    struct gameState state;
        -:   31:    int handCount;
        1:   32:    int bonus = 1;
        -:   33:
        -:   34:    int coppers[MAX_HAND];
        -:   35:    int silvers[MAX_HAND];
        -:   36:    int golds[MAX_HAND];
        -:   37:
     1002:   38:    for (i = 0; i < MAX_HAND; i++) {
branch  0 taken 99%
branch  1 taken 1%
      500:   39:        coppers[i] = copper;
      500:   40:        silvers[i] = silver;
      500:   41:        golds[i] = gold;
      500:   42:    }
        -:   43:
        1:   44:	  printf("\n** Unit test 2: updateCoins Function **\n");
        -:   45:    //test how updateCoins handles each treasure and a different bonus and hand count
        6:   46:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
branch  0 taken 67%
branch  1 taken 33%
        2:   47:      printf("\n\nTreasure cards: %d\n",handCount);
        2:   48:      printf("Bonus: %d\n", bonus);
        -:   49:
        2:   50:      memset(&state,23,sizeof(struct gameState));
        2:   51:      b = initializeGame(numbPlayers, k, seed, &state);
        2:   52:      state.handCount[player] = handCount;
        -:   53:
        -:   54:      // fill hand with all coppers
        2:   55:      memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   56:      updateCoins(player,&state,bonus);
        -:   57:
        2:   58:      printf("\nCoin Count: Copper\n");
        2:   59:      printf("Actual: %d\n",state.coins);
        2:   60:      printf("Expected: %d\n",handCount*1+bonus);
        -:   61:
        2:   62:      assertTrue(state.coins,handCount*1+bonus);
        -:   63:
        -:   64:      // fill hand with all silvers
        2:   65:      memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   66:      updateCoins(player,&state,bonus);
        -:   67:
        2:   68:      printf("\nCoin Count: Silver\n");
        2:   69:      printf("Actual: %d\n",state.coins);
        2:   70:      printf("Expected: %d\n",handCount*2+bonus);
        -:   71:
        2:   72:      assertTrue(state.coins,handCount*2+bonus);
        -:   73:
        -:   74:      //fill hand with all golds
        2:   75:      memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   76:      updateCoins(player,&state,bonus);
        -:   77:
        2:   78:      printf("\nCoin Count: Gold\n");
        2:   79:      printf("Actual: %d\n",state.coins);
        2:   80:      printf("Expected: %d\n",handCount*3+bonus);
        -:   81:
        2:   82:      assertTrue(state.coins,handCount*3+bonus);
        -:   83:
        2:   84:      bonus = bonus + 2;
        2:   85:    }
        -:   86:
        1:   87:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   88:        printf("\nTEST FAILED\n");
    #####:   89:        printf("Fails: %d\n",failureCount);
    #####:   90:    }
        -:   91:    else {
        1:   92:        printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:   93:    }
        -:   94:
        1:   95: 	  printf("** End of Unit Test 2: Coin Count **\n");
        1:   96:    return 0;
        -:   97:}
