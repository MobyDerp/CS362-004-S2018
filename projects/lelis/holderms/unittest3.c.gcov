        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
function assertTrue called 3 returned 100% blocks executed 100%
        -:   12:void assertTrue(int a, int b) {
        3:   13:  if (a == b) {
branch  0 taken 67%
branch  1 taken 33%
        2:   14:      printf("Test: PASSED\n");
        2:   15:  } else {
        1:   16:      printf("Test: FAILED\n");
        1:   17:      failCount++;
        -:   18:  }
        3:   19:}
        -:   20:
function main called 1 returned 100% blocks executed 75%
        -:   21:int main () {
        1:   22:    int numbPlayers = 2;
        1:   23:    int player = 0;
        -:   24:
        -:   25:    // kingdom cards
        1:   26:    int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        1:   27:    int seed = 1000;
        -:   28:    struct gameState state;
        1:   29:	  printf("\n** Unit test 3: Shuffle Function **\n");
        1:   30:    memset(&state,23,sizeof(struct gameState));
        1:   31:    initializeGame(numbPlayers, k, seed, &state);
        -:   32:
        1:   33:    state.deckCount[player] = 0;
        1:   34:    printf("\nPlayer deck count is 0\n");
        1:   35:    assertTrue(shuffle(player,&state),-1);
        -:   36:
        1:   37:    printf("\nPlayer deck count is 10 before and after shuffle\n");
        1:   38:    state.deckCount[player] = 10;
        1:   39:    shuffle(player,&state);
        1:   40:    assertTrue(state.deckCount[player],10);
        -:   41:
        1:   42:    printf("\nCards are shuffled\n");
        1:   43:    int pre_shuffle_card = state.deck[player][0];
        1:   44:    shuffle(player,&state);
        1:   45:    int post_shuffle_card = state.deck[player][0];
        1:   46:    if (pre_shuffle_card != post_shuffle_card) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   47:        assertTrue(1,1);
    #####:   48:    }
        -:   49:    else {
        1:   50:        assertTrue(0,1);
        -:   51:    }
        -:   52:
        1:   53:    if (failCount) {
branch  0 taken 100%
branch  1 taken 0%
        1:   54:        printf("\nTEST FAILED\n");
        1:   55:        printf("Fails: %d\n",failCount);
        1:   56:    }
        -:   57:    else {
    #####:   58:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   59:    }
        1:   60:    printf("\n** End of Unit Test 3: shuffle Function**\n");
        1:   61:    return 0;
        -:   62:}
