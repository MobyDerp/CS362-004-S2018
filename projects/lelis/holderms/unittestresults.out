
** Unit test 1: Buying Cards **

Does player have enough coins?
Test Passed

Attempting to buy desired card!
Testing Failed

Checking amount?
Test Failed
Check to see if player still has existing Buys: 
Test Passed

** End of Unit Test 1: Buying Cards **

** Unit test 2: updateCoins Function **


Treasure cards: 0
Bonus: 1

Coin Count: Copper
Actual: 1
Expected: 1
Test: PASSED

Coin Count: Silver
Actual: 1
Expected: 1
Test: PASSED

Coin Count: Gold
Actual: 1
Expected: 1
Test: PASSED


Treasure cards: 5
Bonus: 3

Coin Count: Copper
Actual: 8
Expected: 8
Test: PASSED

Coin Count: Silver
Actual: 13
Expected: 13
Test: PASSED

Coin Count: Gold
Actual: 18
Expected: 18
Test: PASSED

TEST SUCCESSFULLY COMPLETED
** End of Unit Test 2: Coin Count **

** Unit test 3: Shuffle Function **

Player deck count is 0
Test: PASSED

Player deck count is 10 before and after shuffle
Test: PASSED

Cards are shuffled
Test: FAILED

TEST FAILED
Fails: 1

** End of Unit Test 3: shuffle Function**

** Unit Test 4: whoseTurn Function **

Note: Run Test 4 times since test is set to 5 players
Check to see if other 4 players still have legal targets
Test Passed
Test Passed
Test Passed
Test Passed
** End of Unit Test 4: whoseTurn Function **

**Card Test 1 -- Adventurer**
Adventurer test passed
**Card Test 1 Ends**

**Card Test 2 -- Smithy**
Smithy test passed
**Card Test 2 Ends**

**Card Test 3 great_hall Begins **
great_hall test PASSED
**Card Test 3 great_hall Ends**

**Card Test 4 -- council_room**
orig Buys: 1
G.numBuys: 2
council_room test passed
**Card Test 4 council_room Ends**
File 'unittest1.c'
Lines executed:80.00% of 30
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
No calls
unittest1.c:creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <assert.h>
        -:   10:
        -:   11://Unit test 1 tests cards existance, can player buy the card,and re-check card amount
function main called 1 returned 100% blocks executed 71%
        -:   12:int main (int argc, char** argv){
        -:   13:	struct gameState G;
        1:   14:	printf("\n** Unit test 1: Buying Cards **\n");
        1:   15:	G.numBuys = 2;
        1:   16:	G.coins = 2;
        1:   17:	printf("\nDoes player have enough coins?\n");
        1:   18: 	int test = buyCard(2, &G);
        1:   19:		if(test == -1)
branch  0 taken 100%
branch  1 taken 0%
        1:   20:			printf("Test Passed\n");
        -:   21:		else
    #####:   22:			printf("Test Failed\n");
        -:   23:
        1:   24:	printf("\nAttempting to buy desired card!\n");
        1:   25:	G.coins = 10;
        1:   26:	test = buyCard(2, &G);
        1:   27:	if(test == 0){
branch  0 taken 0%
branch  1 taken 100%
    #####:   28:		printf("Testing Passed\n");
    #####:   29:	} else {
        1:   30:		printf("Testing Failed\n");
        -:   31:	}
        -:   32:
        1:   33: 	printf("\nChecking amount?\n");
        1:   34: 	test = buyCard(2, &G);
        1:   35:	if(test == 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   36:		printf("Test Passed\n");
    #####:   37:	} else {
        1:   38:		printf("Test Failed\n");
        -:   39:	}
        -:   40:
        1:   41: 	printf("Check to see if player still has existing Buys: \n");
        1:   42: 	G.coins = 6;
        1:   43:	test = buyCard(2, &G);
        1:   44:	if(test == -1)
branch  0 taken 100%
branch  1 taken 0%
        -:   45:	{
        1:   46:		printf("Test Passed\n");
        1:   47:	} else {
    #####:   48:		printf("Test Failed\n");
        -:   49:	}
        -:   50:
        1:   51: 	printf("\n** End of Unit Test 1: Buying Cards **\n");
        -:   52:
        1:   53: 	return 0;
        -:   54:}
File 'unittest2.c'
Lines executed:90.00% of 50
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls
unittest2.c:creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
function assertTrue called 6 returned 100% blocks executed 80%
        -:   12:void assertTrue(int a, int b) {
        6:   13:    if (a == b) {
branch  0 taken 100%
branch  1 taken 0%
        6:   14:        printf("Test: PASSED\n");
        6:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        6:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 92%
        -:   22:int main () {
        -:   23:    int i, b;
        1:   24:    int numbPlayers = 2;
        1:   25:    int player = 0;
        -:   26:
        -:   27:    // kingdom cards
        1:   28:    int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        1:   29:    int seed = 1000;
        -:   30:    struct gameState state;
        -:   31:    int handCount;
        1:   32:    int bonus = 1;
        -:   33:
        -:   34:    int coppers[MAX_HAND];
        -:   35:    int silvers[MAX_HAND];
        -:   36:    int golds[MAX_HAND];
        -:   37:
     1002:   38:    for (i = 0; i < MAX_HAND; i++) {
branch  0 taken 99%
branch  1 taken 1%
      500:   39:        coppers[i] = copper;
      500:   40:        silvers[i] = silver;
      500:   41:        golds[i] = gold;
      500:   42:    }
        -:   43:
        1:   44:	  printf("\n** Unit test 2: updateCoins Function **\n");
        -:   45:    //test how updateCoins handles each treasure and a different bonus and hand count
        6:   46:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
branch  0 taken 67%
branch  1 taken 33%
        2:   47:      printf("\n\nTreasure cards: %d\n",handCount);
        2:   48:      printf("Bonus: %d\n", bonus);
        -:   49:
        2:   50:      memset(&state,23,sizeof(struct gameState));
        2:   51:      b = initializeGame(numbPlayers, k, seed, &state);
        2:   52:      state.handCount[player] = handCount;
        -:   53:
        -:   54:      // fill hand with all coppers
        2:   55:      memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   56:      updateCoins(player,&state,bonus);
        -:   57:
        2:   58:      printf("\nCoin Count: Copper\n");
        2:   59:      printf("Actual: %d\n",state.coins);
        2:   60:      printf("Expected: %d\n",handCount*1+bonus);
        -:   61:
        2:   62:      assertTrue(state.coins,handCount*1+bonus);
        -:   63:
        -:   64:      // fill hand with all silvers
        2:   65:      memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   66:      updateCoins(player,&state,bonus);
        -:   67:
        2:   68:      printf("\nCoin Count: Silver\n");
        2:   69:      printf("Actual: %d\n",state.coins);
        2:   70:      printf("Expected: %d\n",handCount*2+bonus);
        -:   71:
        2:   72:      assertTrue(state.coins,handCount*2+bonus);
        -:   73:
        -:   74:      //fill hand with all golds
        2:   75:      memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   76:      updateCoins(player,&state,bonus);
        -:   77:
        2:   78:      printf("\nCoin Count: Gold\n");
        2:   79:      printf("Actual: %d\n",state.coins);
        2:   80:      printf("Expected: %d\n",handCount*3+bonus);
        -:   81:
        2:   82:      assertTrue(state.coins,handCount*3+bonus);
        -:   83:
        2:   84:      bonus = bonus + 2;
        2:   85:    }
        -:   86:
        1:   87:    if (failureCount) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   88:        printf("\nTEST FAILED\n");
    #####:   89:        printf("Fails: %d\n",failureCount);
    #####:   90:    }
        -:   91:    else {
        1:   92:        printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:   93:    }
        -:   94:
        1:   95: 	  printf("** End of Unit Test 2: Coin Count **\n");
        1:   96:    return 0;
        -:   97:}
File 'unittest3.c'
Lines executed:91.43% of 35
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls
unittest3.c:creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
function assertTrue called 3 returned 100% blocks executed 100%
        -:   12:void assertTrue(int a, int b) {
        3:   13:  if (a == b) {
branch  0 taken 67%
branch  1 taken 33%
        2:   14:      printf("Test: PASSED\n");
        2:   15:  } else {
        1:   16:      printf("Test: FAILED\n");
        1:   17:      failCount++;
        -:   18:  }
        3:   19:}
        -:   20:
function main called 1 returned 100% blocks executed 75%
        -:   21:int main () {
        1:   22:    int numbPlayers = 2;
        1:   23:    int player = 0;
        -:   24:
        -:   25:    // kingdom cards
        1:   26:    int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        1:   27:    int seed = 1000;
        -:   28:    struct gameState state;
        1:   29:	  printf("\n** Unit test 3: Shuffle Function **\n");
        1:   30:    memset(&state,23,sizeof(struct gameState));
        1:   31:    initializeGame(numbPlayers, k, seed, &state);
        -:   32:
        1:   33:    state.deckCount[player] = 0;
        1:   34:    printf("\nPlayer deck count is 0\n");
        1:   35:    assertTrue(shuffle(player,&state),-1);
        -:   36:
        1:   37:    printf("\nPlayer deck count is 10 before and after shuffle\n");
        1:   38:    state.deckCount[player] = 10;
        1:   39:    shuffle(player,&state);
        1:   40:    assertTrue(state.deckCount[player],10);
        -:   41:
        1:   42:    printf("\nCards are shuffled\n");
        1:   43:    int pre_shuffle_card = state.deck[player][0];
        1:   44:    shuffle(player,&state);
        1:   45:    int post_shuffle_card = state.deck[player][0];
        1:   46:    if (pre_shuffle_card != post_shuffle_card) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   47:        assertTrue(1,1);
    #####:   48:    }
        -:   49:    else {
        1:   50:        assertTrue(0,1);
        -:   51:    }
        -:   52:
        1:   53:    if (failCount) {
branch  0 taken 100%
branch  1 taken 0%
        1:   54:        printf("\nTEST FAILED\n");
        1:   55:        printf("Fails: %d\n",failCount);
        1:   56:    }
        -:   57:    else {
    #####:   58:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   59:    }
        1:   60:    printf("\n** End of Unit Test 3: shuffle Function**\n");
        1:   61:    return 0;
        -:   62:}
File 'unittest4.c'
Lines executed:100.00% of 12
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls
unittest4.c:creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://unit test 4 tests to check next player's turn
        -:    8://this acts to check if another player is existant
function main called 1 returned 100% blocks executed 80%
        -:    9:int main (int argc, char** argv)	{
        -:   10:  struct gameState G;
        -:   11:  int a;
        1:   12:  int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   13:
        1:   14:	printf ("\n** Unit Test 4: whoseTurn Function **\n");
        -:   15:
        1:   16:	printf("\nNote: Run Test 4 times since test is set to 5 players\n");
        1:   17:	printf("Check to see if other 4 players still have legal targets\n");
       10:   18:  for (int x = 2 ; x < 6 ; ++x)	{
branch  0 taken 80%
branch  1 taken 20%
        4:   19:      a = initializeGame(2, k, 6, &G);
        4:   20:      a = whoseTurn(&G);
        8:   21:      assert(a == G.whoseTurn);
branch  0 taken 0%
branch  1 taken 100%
        4:   22:	printf("Test Passed\n");
        4:   23:	}
        1:   24:	printf("** End of Unit Test 4: whoseTurn Function **\n");
        -:   25:
        1:   26:	return 0;
        -:   27:}
File 'cardtest1.c'
Lines executed:100.00% of 8
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest1.c:creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:
        -:    8:// Unit Test for Adventurer
        -:    9:int adventurerFunc(int currentPlayer, struct gameState *state, int handPos);
        -:   10:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   11:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   12:
function main called 1 returned 100% blocks executed 66%
        -:   13:int main (int argc, char** argv) {
        -:   14:
        -:   15:  struct gameState G;
        1:   16:  int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   17:	printf ("\n**Card Test 1 -- Adventurer**\n");
        -:   18:
        1:   19:	int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   20:
        1:   21:  initializeGame(2, k, 4, &G);
        -:   22:
        2:   23:  assert(cardEffect(adventurer, choice1, choice2, choice3, &G, 0, NULL) == 0);
branch  0 taken 0%
branch  1 taken 100%
        1:   24:  printf("Adventurer test passed\n");
        1:   25:	printf ("**Card Test 1 Ends**\n");
        -:   26:
        1:   27:}
File 'cardtest2.c'
Lines executed:91.67% of 12
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest2.c:creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:// UnitTest for smithy
        -:    8:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:    9:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   10:
function main called 1 returned 100% blocks executed 80%
        -:   11:int main (int argc, char** argv) {
        -:   12:
        -:   13:  struct gameState G;
        1:   14:	int player = 0;
        -:   15:	int prev_Count;
        1:   16:	printf ("\n**Card Test 2 -- Smithy**\n");
        -:   17:
        1:   18:	int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   19:
        -:   20:
        1:   21:  initializeGame(2, k, 2, &G);
        -:   22:
        -:   23:	// store old action count
        1:   24:	prev_Count = G.handCount[player];
        -:   25:
        1:   26:  cardEffect(smithy, 0, 0, 0, &G, 0, NULL);
        -:   27:  //expect #cards to be +3 but then you disgard 1
        -:   28:	//assert(G.handCount[player] == prev_Count + 2);
        1:   29:  if (G.handCount[player] == prev_Count + 2) {
branch  0 taken 100%
branch  1 taken 0%
        1:   30:    printf("Smithy test passed\n");
        1:   31:  } else {
    #####:   32:    printf("Smithy test FAILED; expect cards to be +3\n");
        -:   33:  }
        -:   34:
        1:   35:	printf ("**Card Test 2 Ends**\n");
        -:   36:
        1:   37:  return 0;
        -:   38:
        -:   39:}
File 'cardtest3.c'
Lines executed:92.86% of 14
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
No calls
cardtest3.c:creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:// UnitTest for great_hall
        -:    9:int greatHallFunc(int currentPlayer, struct gameState *state, int handPos);
        -:   10:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   11:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   12:
function main called 1 returned 100% blocks executed 66%
        -:   13:int main (int argc, char** argv) {
        1:   14:	printf ("\n**Card Test 3 great_hall Begins **\n");
        -:   15:
        1:   16:	srand(time(NULL)); // Seed rand function
        -:   17:	/* Prepare arguments for initializeGame */
        1:   18:	int randomSeed = rand();
        -:   19:	struct gameState G;
        1:   20:	int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   21:
        1:   22:  initializeGame(2, k, randomSeed, &G);
        -:   23:
        1:   24:	int origAct = G.numActions;
        -:   25:
        1:   26:  cardEffect(great_hall, 0,0,0, &G, 0, NULL);
        -:   27:	//expect # numActions to be +1
        2:   28:	assert(G.numActions == origAct + 1);
branch  0 taken 0%
branch  1 taken 100%
        -:   29:
        1:   30:	if (G.numActions == origAct + 1) {
branch  0 taken 100%
branch  1 taken 0%
        1:   31:		printf("great_hall test PASSED\n");
        1:   32:	} else {
    #####:   33:		printf("great_hall test FAILED; expect actions to be +1\n");
        -:   34:	}
        -:   35:
        1:   36:	printf ("**Card Test 3 great_hall Ends**\n");
        1:   37:	return 0;
        -:   38:}
File 'cardtest4.c'
Lines executed:92.31% of 13
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
No calls
cardtest4.c:creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:// UnitTest for council_room
        -:    9:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   10:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   11:int council_roomEffect (struct gameState *state, int currentPlayer, int handPos);
        -:   12:
function main called 1 returned 100% blocks executed 80%
        -:   13:int main (void)
        -:   14:{
        -:   15:	struct gameState G;
        1:   16:	printf ("\n**Card Test 4 -- council_room**\n");
        1:   17:	int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   18:
        1:   19:	initializeGame(2, k, 4, &G);
        -:   20:
        1:   21:	int origBuys = G.numBuys;
        1:   22:	printf("orig Buys: %d\n", origBuys);
        -:   23:
        -:   24:	//play cards
        1:   25:	cardEffect(council_room, 0,0,0, &G, 0, 0);
        -:   26:	//council_roomEffect(&G, 0, 0);
        1:   27:	printf("G.numBuys: %d\n", G.numBuys);
        -:   28:	//assert(G.numBuys == origBuys + 1);
        -:   29:
        1:   30:	if (G.numBuys == origBuys + 1) {
branch  0 taken 100%
branch  1 taken 0%
        1:   31:		printf("council_room test passed\n");
        1:   32:	} else {
    #####:   33:		printf("council_room FAILED; expect numBuys to be +1\n");
        -:   34:	}
        -:   35:
        1:   36:	printf ("**Card Test 4 council_room Ends**\n");
        1:   37:	return 0;
        -:   38:}
File 'dominion.c'
Lines executed:30.91% of 647
Branches executed:29.02% of 417
Taken at least once:22.06% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://I contain bugs
function compare called 4614 returned 100% blocks executed 100%
        -:    9:int compare(const void* a, const void* b) {
     4614:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
        9:   11:  return 1;
unconditional  0 taken 100%
     4605:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     1641:   13:  return -1;
unconditional  0 taken 100%
     2964:   14:  return 0;
unconditional  0 taken 100%
     4614:   15:}
unconditional  0 taken 100%
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
unconditional  0 never executed
    #####:   19:  return g;
unconditional  0 never executed
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:  int k8, int k9, int k10) {
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
unconditional  0 never executed
        -:   36:  }
        -:   37:
function initializeGame called 111 returned 100% blocks executed 95%
        -:   38:  int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:    struct gameState *state) {
        -:   40:
        -:   41:      int i;
        -:   42:      int j;
        -:   43:      int it;
        -:   44:      //set up random number generator
      111:   45:      SelectStream(1);
      111:   46:      PutSeed((long)randomSeed);
        -:   47:
        -:   48:      //check number of players
      222:   49:      if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   50:      {
    #####:   51:        return -1;
unconditional  0 never executed
        -:   52:      }
        -:   53:
        -:   54:      //set number of players
      111:   55:      state->numPlayers = numPlayers;
        -:   56:
        -:   57:      //check selected kingdom cards are different
     2442:   58:      for (i = 0; i < 10; i++)
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
        -:   59:      {
    24420:   60:        for (j = 0; j < 10; j++)
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
        -:   61:        {
    21090:   62:          if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   63:          {
    #####:   64:            return -1;
unconditional  0 never executed
        -:   65:          }
    11100:   66:        }
unconditional  0 taken 100%
     1110:   67:      }
unconditional  0 taken 100%
        -:   68:
        -:   69:
        -:   70:      //initialize supply
        -:   71:      ///////////////////////////////
        -:   72:
        -:   73:      //set number of Curse cards
      111:   74:      if (numPlayers == 2)
branch  0 taken 39%
branch  1 taken 61%
        -:   75:      {
       43:   76:        state->supplyCount[curse] = 10;
       43:   77:      }
unconditional  0 taken 100%
       68:   78:      else if (numPlayers == 3)
branch  0 taken 46%
branch  1 taken 54%
        -:   79:      {
       31:   80:        state->supplyCount[curse] = 20;
       31:   81:      }
unconditional  0 taken 100%
        -:   82:      else
        -:   83:      {
       37:   84:        state->supplyCount[curse] = 30;
unconditional  0 taken 100%
        -:   85:      }
        -:   86:
        -:   87:      //set number of Victory cards
      111:   88:      if (numPlayers == 2)
branch  0 taken 39%
branch  1 taken 61%
        -:   89:      {
       43:   90:        state->supplyCount[estate] = 8;
       43:   91:        state->supplyCount[duchy] = 8;
       43:   92:        state->supplyCount[province] = 8;
       43:   93:      }
unconditional  0 taken 100%
        -:   94:      else
        -:   95:      {
       68:   96:        state->supplyCount[estate] = 12;
       68:   97:        state->supplyCount[duchy] = 12;
       68:   98:        state->supplyCount[province] = 12;
unconditional  0 taken 100%
        -:   99:      }
        -:  100:
        -:  101:      //set number of Treasure cards
      111:  102:      state->supplyCount[copper] = 60 - (7 * numPlayers);
      111:  103:      state->supplyCount[silver] = 40;
      111:  104:      state->supplyCount[gold] = 30;
        -:  105:
        -:  106:      //set number of Kingdom cards
     4662:  107:      for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
unconditional  0 taken 100%
branch  1 taken 95%
branch  2 taken 5%
unconditional  3 taken 100%
        -:  108:      {
    36630:  109:        for (j = 0; j < 10; j++)           		//loop chosen cards
unconditional  0 taken 100%
branch  1 taken 94%
branch  2 taken 6%
unconditional  3 taken 100%
        -:  110:        {
    17205:  111:          if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  112:          {
        -:  113:            //check if card is a 'Victory' Kingdom card
     2109:  114:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:  115:            {
      111:  116:              if (numPlayers == 2){
branch  0 taken 39%
branch  1 taken 61%
       43:  117:                state->supplyCount[i] = 8;
       43:  118:              }
unconditional  0 taken 100%
       68:  119:              else{ state->supplyCount[i] = 12; }
unconditional  0 taken 100%
      111:  120:            }
unconditional  0 taken 100%
        -:  121:            else
        -:  122:            {
      999:  123:              state->supplyCount[i] = 10;
unconditional  0 taken 100%
        -:  124:            }
     1110:  125:            break;
unconditional  0 taken 100%
        -:  126:          }
        -:  127:          else    //card is not in the set choosen for the game
        -:  128:          {
    16095:  129:            state->supplyCount[i] = -1;
unconditional  0 taken 100%
        -:  130:          }
    16095:  131:        }
unconditional  0 taken 100%
        -:  132:
     2220:  133:      }
unconditional  0 taken 100%
        -:  134:
        -:  135:      ////////////////////////
        -:  136:      //supply intilization complete
        -:  137:
        -:  138:      //set player decks
      876:  139:      for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  140:      {
      327:  141:        state->deckCount[i] = 0;
     2616:  142:        for (j = 0; j < 3; j++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  143:        {
      981:  144:          state->deck[i][j] = estate;
      981:  145:          state->deckCount[i]++;
      981:  146:        }
unconditional  0 taken 100%
     5232:  147:        for (j = 3; j < 10; j++)
unconditional  0 taken 100%
branch  1 taken 88%
branch  2 taken 13%
unconditional  3 taken 100%
        -:  148:        {
     2289:  149:          state->deck[i][j] = copper;
     2289:  150:          state->deckCount[i]++;
     2289:  151:        }
unconditional  0 taken 100%
      327:  152:      }
unconditional  0 taken 100%
        -:  153:
        -:  154:      //shuffle player decks
      876:  155:      for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  156:      {
      327:  157:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  158:        {
    #####:  159:          return -1;
unconditional  0 never executed
        -:  160:        }
      327:  161:      }
unconditional  0 taken 100%
        -:  162:
        -:  163:      //draw player hands
      876:  164:      for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  165:      {
        -:  166:        //initialize hand size to zero
      327:  167:        state->handCount[i] = 0;
      327:  168:        state->discardCount[i] = 0;
        -:  169:        //draw 5 cards
        -:  170:        // for (j = 0; j < 5; j++)
        -:  171:        //	{
        -:  172:        //	  drawCard(i, state);
        -:  173:        //	}
      327:  174:      }
unconditional  0 taken 100%
        -:  175:
        -:  176:      //set embargo tokens to 0 for all supply piles
     6216:  177:      for (i = 0; i <= treasure_map; i++)
unconditional  0 taken 100%
branch  1 taken 96%
branch  2 taken 4%
unconditional  3 taken 100%
        -:  178:      {
     2997:  179:        state->embargoTokens[i] = 0;
     2997:  180:      }
unconditional  0 taken 100%
        -:  181:
        -:  182:      //initialize first player's turn
      111:  183:      state->outpostPlayed = 0;
      111:  184:      state->phase = 0;
      111:  185:      state->numActions = 1;
      111:  186:      state->numBuys = 1;
      111:  187:      state->playedCardCount = 0;
      111:  188:      state->whoseTurn = 0;
      111:  189:      state->handCount[state->whoseTurn] = 0;
        -:  190:      //int it; move to top
        -:  191:
        -:  192:      //Moved draw cards to here, only drawing at the start of a turn
     1332:  193:      for (it = 0; it < 5; it++){
unconditional  0 taken 100%
branch  1 taken 83%
branch  2 taken 17%
unconditional  3 taken 100%
      555:  194:        drawCard(state->whoseTurn, state);
      555:  195:      }
unconditional  0 taken 100%
        -:  196:
      111:  197:      updateCoins(state->whoseTurn, state, 0);
        -:  198:
      111:  199:      return 0;
unconditional  0 taken 100%
      111:  200:    }
unconditional  0 taken 100%
        -:  201:
function shuffle called 368 returned 100% blocks executed 100%
        -:  202:    int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:      int newDeck[MAX_DECK];
      368:  206:      int newDeckPos = 0;
        -:  207:      int card;
        -:  208:      int i;
        -:  209:
      368:  210:      if (state->deckCount[player] < 1)
branch  0 taken 10%
branch  1 taken 90%
       37:  211:      return -1;
unconditional  0 taken 100%
      331:  212:      qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:      /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
     7252:  215:      while (state->deckCount[player] > 0) {
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
     3295:  216:        card = floor(Random() * state->deckCount[player]);
     3295:  217:        newDeck[newDeckPos] = state->deck[player][card];
     3295:  218:        newDeckPos++;
    21664:  219:        for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 100%
branch  1 taken 70%
branch  2 taken 30%
unconditional  3 taken 100%
     7537:  220:          state->deck[player][i] = state->deck[player][i+1];
     7537:  221:        }
unconditional  0 taken 100%
     3295:  222:        state->deckCount[player]--;
        -:  223:      }
     7252:  224:      for (i = 0; i < newDeckPos; i++) {
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9%
unconditional  3 taken 100%
     3295:  225:        state->deck[player][i] = newDeck[i];
     3295:  226:        state->deckCount[player]++;
     3295:  227:      }
unconditional  0 taken 100%
        -:  228:
      331:  229:      return 0;
unconditional  0 taken 100%
      368:  230:    }
unconditional  0 taken 100%
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
        -:  232:    int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:    {
        -:  234:      int card;
    #####:  235:      int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:      //check if it is the right phase
    #####:  238:      if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:      {
    #####:  240:        return -1;
unconditional  0 never executed
        -:  241:      }
        -:  242:
        -:  243:      //check if player has enough actions
    #####:  244:      if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:      {
    #####:  246:        return -1;
unconditional  0 never executed
        -:  247:      }
        -:  248:
        -:  249:      //get card played
    #####:  250:      card = handCard(handPos, state);
        -:  251:
        -:  252:      //check if selected card is an action
    #####:  253:      if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:      {
    #####:  255:        return -1;
unconditional  0 never executed
        -:  256:      }
        -:  257:
        -:  258:      //play card
    #####:  259:      if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  260:      {
    #####:  261:        return -1;
unconditional  0 never executed
        -:  262:      }
        -:  263:
        -:  264:      //reduce number of actions
    #####:  265:      state->numActions--;
        -:  266:
        -:  267:      //update coins (Treasure cards may be added with card draws)
    #####:  268:      updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:      return 0;
unconditional  0 never executed
    #####:  271:    }
unconditional  0 never executed
        -:  272:
function buyCard called 4 returned 100% blocks executed 41%
        -:  273:    int buyCard(int supplyPos, struct gameState *state) {
        -:  274:      int who;
        -:  275:      if (DEBUG){
        -:  276:        printf("Entering buyCard...\n");
        -:  277:      }
        -:  278:
        -:  279:      // I don't know what to do about the phase thing.
        -:  280:
        4:  281:      who = state->whoseTurn;
        -:  282:
        4:  283:      if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  284:        if (DEBUG)
        -:  285:        printf("You do not have any buys left\n");
    #####:  286:        return -1;
unconditional  0 never executed
        4:  287:      } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 100%
branch  1 taken 0%
        -:  288:        if (DEBUG)
        -:  289:        printf("There are not any of that type of card left\n");
        4:  290:        return -1;
unconditional  0 taken 100%
    #####:  291:      } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  292:        if (DEBUG)
        -:  293:        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:        return -1;
unconditional  0 never executed
        -:  295:      } else {
    #####:  296:        state->phase=1;
        -:  297:        //state->supplyCount[supplyPos]--;
    #####:  298:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:
    #####:  300:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:        state->numBuys--;
unconditional  0 never executed
        -:  302:        if (DEBUG)
        -:  303:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:      }
        -:  305:
        -:  306:      //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:      //state->discardCount[who]++;
        -:  308:
    #####:  309:      return 0;
unconditional  0 never executed
        4:  310:    }
unconditional  0 taken 100%
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  312:    int numHandCards(struct gameState *state) {
    #####:  313:      return state->handCount[ whoseTurn(state) ];
unconditional  0 never executed
        -:  314:    }
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
        -:  316:    int handCard(int handPos, struct gameState *state) {
    #####:  317:      int currentPlayer = whoseTurn(state);
    #####:  318:      return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  319:    }
        -:  320:
function supplyCount called 4 returned 100% blocks executed 100%
        -:  321:    int supplyCount(int card, struct gameState *state) {
        4:  322:      return state->supplyCount[card];
unconditional  0 taken 100%
        -:  323:    }
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  325:    int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:      int i;
    #####:  327:      int count = 0;
        -:  328:
    #####:  329:      for (i = 0; i < state->deckCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  330:      {
    #####:  331:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  332:      }
unconditional  0 never executed
        -:  333:
    #####:  334:      for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  335:      {
    #####:  336:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  337:      }
unconditional  0 never executed
        -:  338:
    #####:  339:      for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  340:      {
    #####:  341:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  342:      }
unconditional  0 never executed
        -:  343:
    #####:  344:      return count;
unconditional  0 never executed
        -:  345:    }
        -:  346:
function whoseTurn called 108 returned 100% blocks executed 100%
        -:  347:    int whoseTurn(struct gameState *state) {
      108:  348:      return state->whoseTurn;
unconditional  0 taken 100%
        -:  349:    }
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
        -:  351:    int endTurn(struct gameState *state) {
        -:  352:      int k;
        -:  353:      int i;
    #####:  354:      int currentPlayer = whoseTurn(state);
        -:  355:
        -:  356:      //Discard hand
    #####:  357:      for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  358:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:      }
unconditional  0 never executed
    #####:  361:      state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:      //Code for determining the player
    #####:  364:      if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  365:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:      }
unconditional  0 never executed
        -:  367:      else{
    #####:  368:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
unconditional  0 never executed
        -:  369:      }
        -:  370:
    #####:  371:      state->outpostPlayed = 0;
    #####:  372:      state->phase = 0;
    #####:  373:      state->numActions = 1;
    #####:  374:      state->coins = 0;
    #####:  375:      state->numBuys = 1;
    #####:  376:      state->playedCardCount = 0;
    #####:  377:      state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:      //int k; move to top
        -:  380:      //Next player draws hand
    #####:  381:      for (k = 0; k < 5; k++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  382:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:      }
unconditional  0 never executed
        -:  384:
        -:  385:      //Update money
    #####:  386:      updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:      return 0;
unconditional  0 never executed
        -:  389:    }
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  391:    int isGameOver(struct gameState *state) {
        -:  392:      int i;
        -:  393:      int j;
        -:  394:
        -:  395:      //if stack of Province cards is empty, the game ends
    #####:  396:      if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  397:      {
    #####:  398:        return 1;
unconditional  0 never executed
        -:  399:      }
        -:  400:
        -:  401:      //if three supply pile are at 0, the game ends
    #####:  402:      j = 0;
    #####:  403:      for (i = 0; i < 25; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  404:      {
    #####:  405:        if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:        {
    #####:  407:          j++;
    #####:  408:        }
unconditional  0 never executed
    #####:  409:      }
unconditional  0 never executed
    #####:  410:      if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  411:      {
    #####:  412:        return 1;
unconditional  0 never executed
        -:  413:      }
        -:  414:
    #####:  415:      return 0;
unconditional  0 never executed
    #####:  416:    }
unconditional  0 never executed
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  418:    int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:      int i;
    #####:  421:      int score = 0;
        -:  422:      //score from hand
    #####:  423:      for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  424:      {
    #####:  425:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  426:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  427:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  428:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  429:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  430:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  431:      }
unconditional  0 never executed
        -:  432:
        -:  433:      //score from discard
    #####:  434:      for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  435:      {
    #####:  436:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  437:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  438:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  439:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  440:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  441:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  442:      }
unconditional  0 never executed
        -:  443:
        -:  444:      //score from deck
    #####:  445:      for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  446:      {
    #####:  447:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  448:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  449:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  450:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  451:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  452:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  453:      }
unconditional  0 never executed
        -:  454:
    #####:  455:      return score;
unconditional  0 never executed
        -:  456:    }
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
        -:  458:    int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:      int i;
        -:  460:      int j;
        -:  461:      int highScore;
        -:  462:      int currentPlayer;
        -:  463:
        -:  464:      //get score for each player
    #####:  465:      for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  466:      {
        -:  467:        //set unused player scores to -9999
    #####:  468:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:        {
    #####:  470:          players[i] = -9999;
    #####:  471:        }
unconditional  0 never executed
        -:  472:        else
        -:  473:        {
    #####:  474:          players[i] = scoreFor (i, state);
unconditional  0 never executed
        -:  475:        }
    #####:  476:      }
unconditional  0 never executed
        -:  477:
        -:  478:      //find highest score
    #####:  479:      j = 0;
    #####:  480:      for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  481:      {
    #####:  482:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:        {
    #####:  484:          j = i;
    #####:  485:        }
unconditional  0 never executed
    #####:  486:      }
unconditional  0 never executed
    #####:  487:      highScore = players[j];
        -:  488:
        -:  489:      //add 1 to players who had less turns
    #####:  490:      currentPlayer = whoseTurn(state);
    #####:  491:      for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  492:      {
    #####:  493:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:        {
    #####:  495:          players[i]++;
    #####:  496:        }
unconditional  0 never executed
    #####:  497:      }
unconditional  0 never executed
        -:  498:
        -:  499:      //find new highest score
    #####:  500:      j = 0;
    #####:  501:      for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  502:      {
    #####:  503:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:        {
    #####:  505:          j = i;
    #####:  506:        }
unconditional  0 never executed
    #####:  507:      }
unconditional  0 never executed
    #####:  508:      highScore = players[j];
        -:  509:
        -:  510:      //set winners in array to 1 and rest to 0
    #####:  511:      for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  512:      {
    #####:  513:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:        {
    #####:  515:          players[i] = 1;
    #####:  516:        }
unconditional  0 never executed
        -:  517:        else
        -:  518:        {
    #####:  519:          players[i] = 0;
unconditional  0 never executed
        -:  520:        }
    #####:  521:      }
unconditional  0 never executed
        -:  522:
    #####:  523:      return 0;
unconditional  0 never executed
        -:  524:    }
        -:  525:
function drawCard called 1373 returned 100% blocks executed 100%
        -:  526:    int drawCard(int player, struct gameState *state)
        -:  527:    {	int count;
        -:  528:      int deckCounter;
     1373:  529:      if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3%
branch  1 taken 97%
        -:  530:
        -:  531:        //Step 1 Shuffle the discard pile back into a deck
        -:  532:        int i;
        -:  533:        //Move discard to deck
       86:  534:        for (i = 0; i < state->discardCount[player];i++){
unconditional  0 taken 100%
branch  1 taken 12%
branch  2 taken 88%
unconditional  3 taken 100%
        5:  535:          state->deck[player][i] = state->discard[player][i];
        5:  536:          state->discard[player][i] = -1;
        5:  537:        }
unconditional  0 taken 100%
        -:  538:
       38:  539:        state->deckCount[player] = state->discardCount[player];
       38:  540:        state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:        //Shufffle the deck
       38:  543:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:
        -:  545:        if (DEBUG){//Debug statements
        -:  546:          printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:        }
        -:  548:
       38:  549:        state->discardCount[player] = 0;
        -:  550:
        -:  551:        //Step 2 Draw Card
       38:  552:        count = state->handCount[player];//Get current player's hand count
        -:  553:
        -:  554:        if (DEBUG){//Debug statements
        -:  555:          printf("Current hand count: %d\n", count);
        -:  556:        }
        -:  557:
       38:  558:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       38:  560:        if (deckCounter == 0)
branch  0 taken 92%
branch  1 taken 8%
       35:  561:        return -1;
unconditional  0 taken 100%
        -:  562:
        3:  563:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  564:        state->deckCount[player]--;
        3:  565:        state->handCount[player]++;//Increment hand count
        3:  566:      }
unconditional  0 taken 100%
        -:  567:
        -:  568:      else{
     1335:  569:        int count = state->handCount[player];//Get current hand count for player
        -:  570:        int deckCounter;
        -:  571:        if (DEBUG){//Debug statements
        -:  572:          printf("Current hand count: %d\n", count);
        -:  573:        }
        -:  574:
     1335:  575:        deckCounter = state->deckCount[player];//Create holder for the deck count
     1335:  576:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1335:  577:        state->deckCount[player]--;
     1335:  578:        state->handCount[player]++;//Increment hand count
unconditional  0 taken 100%
        -:  579:      }
        -:  580:
     1338:  581:      return 0;
unconditional  0 taken 100%
     1373:  582:    }
unconditional  0 taken 100%
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
        -:  584:    int getCost(int cardNumber)
        -:  585:    {
    #####:  586:      switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:      {
        -:  588:        case curse:
    #####:  589:        return 0;
unconditional  0 never executed
        -:  590:        case estate:
    #####:  591:        return 2;
unconditional  0 never executed
        -:  592:        case duchy:
    #####:  593:        return 5;
unconditional  0 never executed
        -:  594:        case province:
    #####:  595:        return 8;
unconditional  0 never executed
        -:  596:        case copper:
    #####:  597:        return 0;
unconditional  0 never executed
        -:  598:        case silver:
    #####:  599:        return 3;
unconditional  0 never executed
        -:  600:        case gold:
    #####:  601:        return 6;
unconditional  0 never executed
        -:  602:        case adventurer:
    #####:  603:        return 6;
unconditional  0 never executed
        -:  604:        case council_room:
    #####:  605:        return 5;
unconditional  0 never executed
        -:  606:        case feast:
    #####:  607:        return 4;
unconditional  0 never executed
        -:  608:        case gardens:
    #####:  609:        return 4;
unconditional  0 never executed
        -:  610:        case mine:
    #####:  611:        return 5;
unconditional  0 never executed
        -:  612:        case remodel:
    #####:  613:        return 4;
unconditional  0 never executed
        -:  614:        case smithy:
    #####:  615:        return 4;
unconditional  0 never executed
        -:  616:        case village:
    #####:  617:        return 3;
unconditional  0 never executed
        -:  618:        case baron:
    #####:  619:        return 4;
unconditional  0 never executed
        -:  620:        case great_hall:
    #####:  621:        return 3;
unconditional  0 never executed
        -:  622:        case minion:
    #####:  623:        return 5;
unconditional  0 never executed
        -:  624:        case steward:
    #####:  625:        return 3;
unconditional  0 never executed
        -:  626:        case tribute:
    #####:  627:        return 5;
unconditional  0 never executed
        -:  628:        case ambassador:
    #####:  629:        return 3;
unconditional  0 never executed
        -:  630:        case cutpurse:
    #####:  631:        return 4;
unconditional  0 never executed
        -:  632:        case embargo:
    #####:  633:        return 2;
unconditional  0 never executed
        -:  634:        case outpost:
    #####:  635:        return 5;
unconditional  0 never executed
        -:  636:        case salvager:
    #####:  637:        return 4;
unconditional  0 never executed
        -:  638:        case sea_hag:
    #####:  639:        return 4;
unconditional  0 never executed
        -:  640:        case treasure_map:
    #####:  641:        return 4;
unconditional  0 never executed
        -:  642:      }
        -:  643:
    #####:  644:      return -1;
unconditional  0 never executed
    #####:  645:    }
unconditional  0 never executed
        -:  646:
        -:  647:
function adventurerEffect called 1 returned 100% blocks executed 73%
        -:  648:    int adventurerEffect (struct gameState *state, int currentPlayer) {
        1:  649:      int drawntreasure = 0;
        -:  650:      int temphand[MAX_HAND];// moved above the if statement
        1:  651:      int z = 1;// this is the counter for the temp hand
        -:  652:      int cardDrawn;
        -:  653:
        6:  654:      while(drawntreasure<2){
unconditional  0 taken 100%
branch  1 taken 67%
branch  2 taken 33%
unconditional  3 taken 100%
        2:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:  656:          shuffle(currentPlayer, state);
    #####:  657:        }
unconditional  0 never executed
        2:  658:        drawCard(currentPlayer, state);
        2:  659:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  660:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  661:        drawntreasure++;
unconditional  0 taken 100%
        -:  662:        else{
    #####:  663:          temphand[z]=cardDrawn;
    #####:  664:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:          z++;
unconditional  0 never executed
        -:  666:        }
        -:  667:      }
        4:  668:      while(z-1>=0){
unconditional  0 taken 100%
branch  1 taken 50%
branch  2 taken 50%
unconditional  3 taken 100%
        1:  669:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  670:        z=z-1;
        -:  671:      }
        1:  672:      return 0;
unconditional  0 taken 100%
        -:  673:    }
        -:  674:
        -:  675:
function smithyEffect called 1 returned 100% blocks executed 100%
        -:  676:    int smithyEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  677:      //+3 Cards
        -:  678:      int i;
        8:  679:      for (i = 0; i < 3; i++)
unconditional  0 taken 100%
branch  1 taken 75%
branch  2 taken 25%
unconditional  3 taken 100%
        -:  680:      {
        3:  681:        drawCard(currentPlayer, state);
        3:  682:      }
unconditional  0 taken 100%
        -:  683:
        -:  684:      //discard card from hand
        1:  685:      discardCard(handPos+1, currentPlayer, state, 0);
        1:  686:      return 0;
unconditional  0 taken 100%
        -:  687:    }
        -:  688:
function embargoEffect called 0 returned 0% blocks executed 0%
        -:  689:    int embargoEffect (struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  690:      //+2 Coins
    #####:  691:      state->coins = state->coins + 2;
        -:  692:
        -:  693:      //see if selected pile is in play
    #####:  694:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  695:      {
    #####:  696:        return -1;
unconditional  0 never executed
        -:  697:      }
        -:  698:
        -:  699:      //add embargo token to selected supply pile
    #####:  700:      state->embargoTokens[choice1]++;
        -:  701:
        -:  702:      //trash card
    #####:  703:      discardCard(handPos, currentPlayer, state, 1);
    #####:  704:      return 0;
unconditional  0 never executed
    #####:  705:    }
unconditional  0 never executed
        -:  706:
function cutpurseEffect called 0 returned 0% blocks executed 0%
        -:  707:    int cutpurseEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  708:      int i, j, k;
        -:  709:
    #####:  710:      updateCoins(currentPlayer, state, 3);
    #####:  711:      for (i = 0; i < state->numPlayers-1; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  712:      {
    #####:  713:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  714:        {
    #####:  715:          for (j = 0; j < state->handCount[i]; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  716:          {
    #####:  717:            if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  718:            {
    #####:  719:              discardCard(j, i, state, 0);
    #####:  720:              break;
unconditional  0 never executed
        -:  721:            }
    #####:  722:            if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  723:            {
    #####:  724:              for (k = 0; k < state->handCount[i]; k++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  725:              {
        -:  726:                if (DEBUG)
        -:  727:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  728:              }
unconditional  0 never executed
    #####:  729:              break;
unconditional  0 never executed
        -:  730:            }
    #####:  731:          }
unconditional  0 never executed
        -:  732:
    #####:  733:        }
unconditional  0 never executed
        -:  734:
    #####:  735:      }
unconditional  0 never executed
        -:  736:
        -:  737:      //discard played card from hand
    #####:  738:      discardCard(handPos, currentPlayer, state, 0);
        -:  739:
    #####:  740:      return 0;
unconditional  0 never executed
        -:  741:    }
        -:  742:
function council_roomEffect called 101 returned 100% blocks executed 100%
        -:  743:    int council_roomEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  744:      int i;
        -:  745:      //+4 Cards
     1212:  746:      for (i = 0; i <= 4; i++)
unconditional  0 taken 100%
branch  1 taken 83%
branch  2 taken 17%
unconditional  3 taken 100%
        -:  747:      {
        -:  748:        //printf("%d\n", i );
      505:  749:        drawCard(currentPlayer, state);
      505:  750:      }
unconditional  0 taken 100%
        -:  751:
        -:  752:      //+1 Buy
      101:  753:      state->numBuys++;
        -:  754:
        -:  755:      //Each other player draws a card
     1018:  756:      for (i = 0; i <= state->numPlayers; i++)
unconditional  0 taken 100%
branch  1 taken 80%
branch  2 taken 20%
unconditional  3 taken 100%
        -:  757:      {
      408:  758:        if ( i != currentPlayer )
branch  0 taken 75%
branch  1 taken 25%
        -:  759:        {
      307:  760:          drawCard(i, state);
      307:  761:        }
unconditional  0 taken 100%
      408:  762:      }
unconditional  0 taken 100%
        -:  763:
        -:  764:      //put played card in played card pile
      101:  765:      discardCard(handPos, currentPlayer, state, 0);
        -:  766:
      101:  767:      return 0;
unconditional  0 taken 100%
        -:  768:    }
        -:  769:
function cardEffect called 104 returned 100% blocks executed 4%
        -:  770:    int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  771:    {
        -:  772:      int i;
        -:  773:      int j;
        -:  774:      int k;
        -:  775:      int x;
        -:  776:      int index;
      104:  777:      int currentPlayer = whoseTurn(state);
      104:  778:      int nextPlayer = currentPlayer + 1;
        -:  779:
      104:  780:      int tributeRevealedCards[2] = {-1, -1};
        -:  781:      int temphand[MAX_HAND];// moved above the if statement
      104:  782:      int drawntreasure=0;
        -:  783:      int cardDrawn;
      104:  784:      int z = 0;// this is the counter for the temp hand
      104:  785:      if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37%
branch  1 taken 63%
       38:  786:        nextPlayer = 0;
       38:  787:      }
unconditional  0 taken 100%
        -:  788:
        -:  789:
        -:  790:
        -:  791:      //uses switch to select card and perform actions
      104:  792:      switch( card )
branch  0 taken 1%
branch  1 taken 97%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  793:      {
        -:  794:        case adventurer:
        1:  795:        return adventurerEffect(state, currentPlayer);
unconditional  0 taken 100%
        -:  796:
        -:  797:        case council_room:
      101:  798:        return council_roomEffect(state, currentPlayer, handPos);
unconditional  0 taken 100%
        -:  799:
        -:  800:        case feast:
        -:  801:        //gain card with cost up to 5
        -:  802:        //Backup hand
    #####:  803:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  804:          temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  805:          state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  806:        }
unconditional  0 never executed
        -:  807:        //Backup hand
        -:  808:
        -:  809:        //Update Coins for Buy
    #####:  810:        updateCoins(currentPlayer, state, 5);
    #####:  811:        x = 1;//Condition to loop on
    #####:  812:        while( x == 1) {//Buy one card
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  813:          if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  814:            if (DEBUG)
        -:  815:            printf("None of that card left, sorry!\n");
        -:  816:
        -:  817:            if (DEBUG){
        -:  818:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  819:            }
    #####:  820:          }
unconditional  0 never executed
    #####:  821:          else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  822:            printf("That card is too expensive!\n");
        -:  823:
        -:  824:            if (DEBUG){
        -:  825:              printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  826:            }
    #####:  827:          }
unconditional  0 never executed
        -:  828:          else{
        -:  829:
        -:  830:            if (DEBUG){
        -:  831:              printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  832:            }
        -:  833:
    #####:  834:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  835:            x = 0;//No more buying cards
unconditional  0 never executed
        -:  836:
        -:  837:            if (DEBUG){
        -:  838:              printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:            }
        -:  840:
        -:  841:          }
        -:  842:        }
        -:  843:
        -:  844:        //Reset Hand
    #####:  845:        for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  846:          state->hand[currentPlayer][i] = temphand[i];
    #####:  847:          temphand[i] = -1;
    #####:  848:        }
unconditional  0 never executed
        -:  849:        //Reset Hand
        -:  850:
    #####:  851:        return 0;
unconditional  0 never executed
        -:  852:
        -:  853:        case gardens:
    #####:  854:        return -1;
unconditional  0 never executed
        -:  855:
        -:  856:        case mine:
    #####:  857:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  860:        {
    #####:  861:          return -1;
unconditional  0 never executed
        -:  862:        }
        -:  863:
    #####:  864:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  865:        {
    #####:  866:          return -1;
unconditional  0 never executed
        -:  867:        }
        -:  868:
    #####:  869:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  870:        {
    #####:  871:          return -1;
unconditional  0 never executed
        -:  872:        }
        -:  873:
    #####:  874:        gainCard(choice2, state, 2, currentPlayer);
        -:  875:
        -:  876:        //discard card from hand
    #####:  877:        discardCard(handPos, currentPlayer, state, 0);
        -:  878:
        -:  879:        //discard trashed card
    #####:  880:        for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  881:        {
    #####:  882:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  883:          {
    #####:  884:            discardCard(i, currentPlayer, state, 0);
    #####:  885:            break;
unconditional  0 never executed
        -:  886:          }
    #####:  887:        }
unconditional  0 never executed
        -:  888:
    #####:  889:        return 0;
unconditional  0 never executed
        -:  890:
        -:  891:        case remodel:
    #####:  892:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  893:
    #####:  894:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  895:        {
    #####:  896:          return -1;
unconditional  0 never executed
        -:  897:        }
        -:  898:
    #####:  899:        gainCard(choice2, state, 0, currentPlayer);
        -:  900:
        -:  901:        //discard card from hand
    #####:  902:        discardCard(handPos, currentPlayer, state, 0);
        -:  903:
        -:  904:        //discard trashed card
    #####:  905:        for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -:  906:        {
    #####:  907:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  908:          {
    #####:  909:            discardCard(i, currentPlayer, state, 0);
    #####:  910:            break;
unconditional  0 never executed
        -:  911:          }
    #####:  912:        }
unconditional  0 never executed
        -:  913:
        -:  914:
    #####:  915:        return 0;
unconditional  0 never executed
        -:  916:
        -:  917:        case smithy:
        1:  918:          return smithyEffect(state, currentPlayer, handPos);
unconditional  0 taken 100%
        -:  919:
        -:  920:        case village:
        -:  921:        //+1 Card
    #####:  922:        drawCard(currentPlayer, state);
        -:  923:
        -:  924:        //+2 Actions
    #####:  925:        state->numActions = state->numActions + 2;
        -:  926:
        -:  927:        //discard played card from hand
    #####:  928:        discardCard(handPos, currentPlayer, state, 0);
    #####:  929:        return 0;
unconditional  0 never executed
        -:  930:
        -:  931:        case baron:
    #####:  932:        state->numBuys++;//Increase buys by 1!
    #####:  933:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  934:          int p = 0;//Iterator for hand!
    #####:  935:          int card_not_discarded = 1;//Flag for discard set!
    #####:  936:          while(card_not_discarded){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  937:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  938:              state->coins += 4;//Add 4 coins to the amount of coins
    #####:  939:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  940:              state->discardCount[currentPlayer]++;
    #####:  941:              for (;p < state->handCount[currentPlayer]; p++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####:  942:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  943:              }
unconditional  0 never executed
    #####:  944:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  945:              state->handCount[currentPlayer]--;
    #####:  946:              card_not_discarded = 0;//Exit the loop
    #####:  947:            }
unconditional  0 never executed
    #####:  948:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  949:              if(DEBUG) {
        -:  950:                printf("No estate cards in your hand, invalid choice\n");
        -:  951:                printf("Must gain an estate if there are any\n");
        -:  952:              }
    #####:  953:              if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  954:                gainCard(estate, state, 0, currentPlayer);
    #####:  955:                state->supplyCount[estate]--;//Decrement estates
    #####:  956:                if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  957:                  isGameOver(state);
    #####:  958:                }
unconditional  0 never executed
    #####:  959:              }
unconditional  0 never executed
    #####:  960:              card_not_discarded = 0;//Exit the loop
    #####:  961:            }
unconditional  0 never executed
        -:  962:
        -:  963:            else{
    #####:  964:              p++;//Next card
unconditional  0 never executed
        -:  965:            }
        -:  966:          }
    #####:  967:        }
unconditional  0 never executed
        -:  968:
        -:  969:        else{
    #####:  970:          if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  971:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  972:            state->supplyCount[estate]--;//Decrement Estates
    #####:  973:            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  974:              isGameOver(state);
    #####:  975:            }
unconditional  0 never executed
    #####:  976:          }
unconditional  0 never executed
        -:  977:        }
        -:  978:
        -:  979:
    #####:  980:        return 0;
unconditional  0 never executed
        -:  981:
        -:  982:        case great_hall:
        -:  983:        //+1 Card
        1:  984:        drawCard(currentPlayer, state);
        -:  985:
        -:  986:        //+1 Actions
        1:  987:        state->numActions++;
        -:  988:
        -:  989:        //discard card from hand
        1:  990:        discardCard(handPos, currentPlayer, state, 0);
        1:  991:        return 0;
unconditional  0 taken 100%
        -:  992:
        -:  993:        case minion:
        -:  994:        //+1 action
    #####:  995:        state->numActions++;
        -:  996:
        -:  997:        //discard card from hand
    #####:  998:        discardCard(handPos, currentPlayer, state, 0);
        -:  999:
    #####: 1000:        if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1001:        {
    #####: 1002:          state->coins = state->coins + 2;
    #####: 1003:        }
unconditional  0 never executed
        -: 1004:
    #####: 1005:        else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1006:        {
        -: 1007:          //discard hand
    #####: 1008:          while(numHandCards(state) > 0)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1009:          {
    #####: 1010:            discardCard(handPos, currentPlayer, state, 0);
        -: 1011:          }
        -: 1012:
        -: 1013:          //draw 4
    #####: 1014:          for (i = 0; i < 4; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1015:          {
    #####: 1016:            drawCard(currentPlayer, state);
    #####: 1017:          }
unconditional  0 never executed
        -: 1018:
        -: 1019:          //other players discard hand and redraw if hand size > 4
    #####: 1020:          for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1021:          {
    #####: 1022:            if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1023:            {
    #####: 1024:              if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1025:              {
        -: 1026:                //discard hand
    #####: 1027:                while( state->handCount[i] > 0 )
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1028:                {
    #####: 1029:                  discardCard(handPos, i, state, 0);
        -: 1030:                }
        -: 1031:
        -: 1032:                //draw 4
    #####: 1033:                for (j = 0; j < 4; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1034:                {
    #####: 1035:                  drawCard(i, state);
    #####: 1036:                }
unconditional  0 never executed
    #####: 1037:              }
unconditional  0 never executed
    #####: 1038:            }
unconditional  0 never executed
    #####: 1039:          }
unconditional  0 never executed
        -: 1040:
    #####: 1041:        }
unconditional  0 never executed
    #####: 1042:        return 0;
unconditional  0 never executed
        -: 1043:
        -: 1044:        case steward:
    #####: 1045:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1046:        {
        -: 1047:          //+2 cards
    #####: 1048:          drawCard(currentPlayer, state);
    #####: 1049:          drawCard(currentPlayer, state);
    #####: 1050:        }
unconditional  0 never executed
    #####: 1051:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1052:        {
        -: 1053:          //+2 coins
    #####: 1054:          state->coins = state->coins + 2;
    #####: 1055:        }
unconditional  0 never executed
        -: 1056:        else
        -: 1057:        {
        -: 1058:          //trash 2 cards in hand
    #####: 1059:          discardCard(choice2, currentPlayer, state, 1);
    #####: 1060:          discardCard(choice3, currentPlayer, state, 1);
unconditional  0 never executed
        -: 1061:        }
        -: 1062:
        -: 1063:        //discard card from hand
    #####: 1064:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:        return 0;
unconditional  0 never executed
        -: 1066:
        -: 1067:        case tribute:
    #####: 1068:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1069:          if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:            state->deckCount[nextPlayer]--;
    #####: 1072:          }
unconditional  0 never executed
    #####: 1073:          else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1074:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1075:            state->discardCount[nextPlayer]--;
    #####: 1076:          }
unconditional  0 never executed
        -: 1077:          else{
        -: 1078:            //No Card to Reveal
        -: 1079:            if (DEBUG){
        -: 1080:              printf("No cards to reveal\n");
        -: 1081:            }
        -: 1082:          }
    #####: 1083:        }
unconditional  0 never executed
        -: 1084:
        -: 1085:        else{
    #####: 1086:          if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1087:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1088:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1089:              state->deckCount[nextPlayer]++;
    #####: 1090:              state->discard[nextPlayer][i] = -1;
    #####: 1091:              state->discardCount[nextPlayer]--;
    #####: 1092:            }
unconditional  0 never executed
        -: 1093:
    #####: 1094:            shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1095:          }
unconditional  0 never executed
    #####: 1096:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1097:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1098:          state->deckCount[nextPlayer]--;
    #####: 1099:          tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1100:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1101:          state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -: 1102:        }
        -: 1103:
    #####: 1104:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1105:          state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1106:          state->playedCardCount++;
    #####: 1107:          tributeRevealedCards[1] = -1;
    #####: 1108:        }
unconditional  0 never executed
        -: 1109:
    #####: 1110:        for (i = 0; i <= 2; i ++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1111:          if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1112:            state->coins += 2;
    #####: 1113:          }
unconditional  0 never executed
        -: 1114:
    #####: 1115:          else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1116:            drawCard(currentPlayer, state);
    #####: 1117:            drawCard(currentPlayer, state);
    #####: 1118:          }
unconditional  0 never executed
        -: 1119:          else{//Action Card
    #####: 1120:            state->numActions = state->numActions + 2;
unconditional  0 never executed
        -: 1121:          }
    #####: 1122:        }
unconditional  0 never executed
        -: 1123:
    #####: 1124:        return 0;
unconditional  0 never executed
        -: 1125:
        -: 1126:        case ambassador:
    #####: 1127:        j = 0;		//used to check if player has enough cards to discard
        -: 1128:
    #####: 1129:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1130:        {
    #####: 1131:          return -1;
unconditional  0 never executed
        -: 1132:        }
        -: 1133:
    #####: 1134:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1135:        {
    #####: 1136:          return -1;
unconditional  0 never executed
        -: 1137:        }
        -: 1138:
    #####: 1139:        for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1140:        {
    #####: 1141:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1142:          {
    #####: 1143:            j++;
    #####: 1144:          }
unconditional  0 never executed
    #####: 1145:        }
unconditional  0 never executed
    #####: 1146:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1147:        {
    #####: 1148:          return -1;
unconditional  0 never executed
        -: 1149:        }
        -: 1150:
        -: 1151:        if (DEBUG)
        -: 1152:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1153:
        -: 1154:        //increase supply count for choosen card by amount being discarded
    #####: 1155:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1156:
        -: 1157:        //each other player gains a copy of revealed card
    #####: 1158:        for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1159:        {
    #####: 1160:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1161:          {
    #####: 1162:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1163:          }
unconditional  0 never executed
    #####: 1164:        }
unconditional  0 never executed
        -: 1165:
        -: 1166:        //discard played card from hand
    #####: 1167:        discardCard(handPos, currentPlayer, state, 0);
        -: 1168:
        -: 1169:        //trash copies of cards returned to supply
    #####: 1170:        for (j = 0; j < choice2; j++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1171:        {
    #####: 1172:          for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1173:          {
    #####: 1174:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1175:            {
    #####: 1176:              discardCard(i, currentPlayer, state, 1);
    #####: 1177:              break;
unconditional  0 never executed
        -: 1178:            }
    #####: 1179:          }
unconditional  0 never executed
    #####: 1180:        }
unconditional  0 never executed
        -: 1181:
    #####: 1182:        return 0;
unconditional  0 never executed
        -: 1183:
        -: 1184:        case cutpurse:
    #####: 1185:        return cutpurseEffect(state, currentPlayer, handPos);
unconditional  0 never executed
        -: 1186:
        -: 1187:
        -: 1188:        case embargo:
    #####: 1189:        return embargoEffect(state, currentPlayer, handPos, choice1);
unconditional  0 never executed
        -: 1190:
        -: 1191:
        -: 1192:        case outpost:
        -: 1193:        //set outpost flag
    #####: 1194:        state->outpostPlayed++;
        -: 1195:
        -: 1196:        //discard card
    #####: 1197:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:        return 0;
unconditional  0 never executed
        -: 1199:
        -: 1200:        case salvager:
        -: 1201:        //+1 buy
    #####: 1202:        state->numBuys++;
        -: 1203:
    #####: 1204:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1205:        {
        -: 1206:          //gain coins equal to trashed card
    #####: 1207:          state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1208:          //trash card
    #####: 1209:          discardCard(choice1, currentPlayer, state, 1);
    #####: 1210:        }
unconditional  0 never executed
        -: 1211:
        -: 1212:        //discard card
    #####: 1213:        discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:        return 0;
unconditional  0 never executed
        -: 1215:
        -: 1216:        case sea_hag:
    #####: 1217:        for (i = 0; i < state->numPlayers; i++){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1218:          if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1219:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:            state->discardCount[i]++;
    #####: 1221:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1222:          }
unconditional  0 never executed
    #####: 1223:        }
unconditional  0 never executed
    #####: 1224:        return 0;
unconditional  0 never executed
        -: 1225:
        -: 1226:        case treasure_map:
        -: 1227:        //search hand for another treasure_map
    #####: 1228:        index = -1;
    #####: 1229:        for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1230:        {
    #####: 1231:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1232:          {
    #####: 1233:            index = i;
    #####: 1234:            break;
unconditional  0 never executed
        -: 1235:          }
    #####: 1236:        }
unconditional  0 never executed
    #####: 1237:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1238:        {
        -: 1239:          //trash both treasure cards
    #####: 1240:          discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:          discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:          //gain 4 Gold cards
    #####: 1244:          for (i = 0; i < 4; i++)
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
        -: 1245:          {
    #####: 1246:            gainCard(gold, state, 1, currentPlayer);
    #####: 1247:          }
unconditional  0 never executed
        -: 1248:
        -: 1249:          //return success
    #####: 1250:          return 1;
unconditional  0 never executed
        -: 1251:        }
        -: 1252:
        -: 1253:        //no second treasure_map found in hand
    #####: 1254:        return -1;
unconditional  0 never executed
        -: 1255:      }
        -: 1256:
    #####: 1257:      return -1;
unconditional  0 never executed
      104: 1258:    }
unconditional  0 taken 100%
        -: 1259:
function discardCard called 103 returned 100% blocks executed 80%
        -: 1260:    int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:    {
        -: 1262:
        -: 1263:      //if card is not trashed, added to Played pile
      103: 1264:      if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1265:      {
        -: 1266:        //add card to played pile
      103: 1267:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      103: 1268:        state->playedCardCount++;
      103: 1269:      }
unconditional  0 taken 100%
        -: 1270:
        -: 1271:      //set played card to -1
      103: 1272:      state->hand[currentPlayer][handPos] = -1;
        -: 1273:
        -: 1274:      //remove card from player's hand
      103: 1275:      if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1276:      {
        -: 1277:        //reduce number of cards in hand
    #####: 1278:        state->handCount[currentPlayer]--;
    #####: 1279:      }
unconditional  0 never executed
      103: 1280:      else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1281:      {
        -: 1282:        //reduce number of cards in hand
    #####: 1283:        state->handCount[currentPlayer]--;
    #####: 1284:      }
unconditional  0 never executed
        -: 1285:      else
        -: 1286:      {
        -: 1287:        //replace discarded card with last card in hand
      103: 1288:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:        //set last card to -1
      103: 1290:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:        //reduce number of cards in hand
      103: 1292:        state->handCount[currentPlayer]--;
unconditional  0 taken 100%
        -: 1293:      }
        -: 1294:
      103: 1295:      return 0;
unconditional  0 taken 100%
        -: 1296:    }
        -: 1297:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1298:    int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:    {
        -: 1300:      //Note: supplyPos is enum of choosen card
        -: 1301:
        -: 1302:      //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1303:      if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1304:      {
    #####: 1305:        return -1;
unconditional  0 never executed
        -: 1306:      }
        -: 1307:
        -: 1308:      //added card for [whoseTurn] current player:
        -: 1309:      // toFlag = 0 : add to discard
        -: 1310:      // toFlag = 1 : add to deck
        -: 1311:      // toFlag = 2 : add to hand
        -: 1312:
    #####: 1313:      if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1314:      {
    #####: 1315:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1316:        state->deckCount[player]++;
    #####: 1317:      }
unconditional  0 never executed
    #####: 1318:      else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1319:      {
    #####: 1320:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:        state->handCount[player]++;
    #####: 1322:      }
unconditional  0 never executed
        -: 1323:      else
        -: 1324:      {
    #####: 1325:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1326:        state->discardCount[player]++;
unconditional  0 never executed
        -: 1327:      }
        -: 1328:
        -: 1329:      //decrease number in supply pile
    #####: 1330:      state->supplyCount[supplyPos]--;
        -: 1331:
    #####: 1332:      return 0;
unconditional  0 never executed
    #####: 1333:    }
unconditional  0 never executed
        -: 1334:
function updateCoins called 117 returned 100% blocks executed 100%
        -: 1335:    int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:    {
        -: 1337:      int i;
        -: 1338:
        -: 1339:      //reset coin count
      117: 1340:      state->coins = 0;
        -: 1341:
        -: 1342:      //add coins for each Treasure card in player's hand
     1374: 1343:      for (i = 0; i < state->handCount[player]; i++)
unconditional  0 taken 100%
branch  1 taken 83%
branch  2 taken 17%
unconditional  3 taken 100%
        -: 1344:      {
      570: 1345:        if (state->hand[player][i] == copper)
branch  0 taken 65%
branch  1 taken 35%
        -: 1346:        {
      373: 1347:          state->coins += 1;
      373: 1348:        }
unconditional  0 taken 100%
      197: 1349:        else if (state->hand[player][i] == silver)
branch  0 taken 3%
branch  1 taken 97%
        -: 1350:        {
        5: 1351:          state->coins += 2;
        5: 1352:        }
unconditional  0 taken 100%
      192: 1353:        else if (state->hand[player][i] == gold)
branch  0 taken 3%
branch  1 taken 97%
        -: 1354:        {
        5: 1355:          state->coins += 3;
        5: 1356:        }
unconditional  0 taken 100%
      570: 1357:      }
unconditional  0 taken 100%
        -: 1358:
        -: 1359:      //add bonus
      117: 1360:      state->coins += bonus;
        -: 1361:
      117: 1362:      return 0;
unconditional  0 taken 100%
        -: 1363:    }
        -: 1364:
        -: 1365:
        -: 1366:    //end of dominion.c
