        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <time.h>
        -:    7:
        -:    8:// UnitTest for council_room
        -:    9:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus);
        -:   10:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state);
        -:   11:int council_roomEffect (struct gameState *state, int currentPlayer, int handPos);
        -:   12:
function main called 1 returned 100% blocks executed 80%
        -:   13:int main (void)
        -:   14:{
        -:   15:	struct gameState G;
        1:   16:	printf ("\n**Card Test 4 -- council_room**\n");
        1:   17:	int k[10] = {adventurer, ambassador, great_hall, village, council_room, mine, cutpurse, sea_hag, tribute, smithy};
        -:   18:
        1:   19:	initializeGame(2, k, 4, &G);
        -:   20:
        1:   21:	int origBuys = G.numBuys;
        1:   22:	printf("orig Buys: %d\n", origBuys);
        -:   23:
        -:   24:	//play cards
        1:   25:	cardEffect(council_room, 0,0,0, &G, 0, 0);
        -:   26:	//council_roomEffect(&G, 0, 0);
        1:   27:	printf("G.numBuys: %d\n", G.numBuys);
        -:   28:	//assert(G.numBuys == origBuys + 1);
        -:   29:
        1:   30:	if (G.numBuys == origBuys + 1) {
branch  0 taken 100%
branch  1 taken 0%
        1:   31:		printf("council_room test passed\n");
        1:   32:	} else {
    #####:   33:		printf("council_room FAILED; expect numBuys to be +1\n");
        -:   34:	}
        -:   35:
        1:   36:	printf ("**Card Test 4 council_room Ends**\n");
        1:   37:	return 0;
        -:   38:}
